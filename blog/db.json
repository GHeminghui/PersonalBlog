{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.scss","path":"css/donate.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484368909000},{"_id":"source/.DS_Store","hash":"bc05aadde1c6e6cf0b68ed19f571224d067a0bdd","modified":1484633291000},{"_id":"source/CNAME","hash":"fc60c17785f4f367a081966c0a5b08e51bf5a0f7","modified":1480254998000},{"_id":"source/baidu_verify_MOOV1ozXk6.html","hash":"eaddec4eaf866a0e85858dd84be6f37600c6262a","modified":1484319150000},{"_id":"source/favicon.ico","hash":"807245b96a29dc4962cfd6e1d06a466e436d6feb","modified":1484530495000},{"_id":"themes/maupassant/.DS_Store","hash":"13d4d40feea9f5c1f4b32f460dfa7bc257742b0e","modified":1484642542000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1479328282000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1479328282000},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1479328282000},{"_id":"themes/maupassant/_config.yml","hash":"ced983bb737a284f3bd449177ec8faee09b20d53","modified":1484628469000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1479328282000},{"_id":"source/_posts/.DS_Store","hash":"381eaa358bd3aaa8b7a96a5be995d51a2f4e0d70","modified":1484383721000},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"78b557ecb2cf0af42b7ec74a818570e739d94df8","modified":1483887349000},{"_id":"source/_posts/.Ulysses-favorites.plist","hash":"413fe8235a7fac3e1355cb3f2a41e32275745b01","modified":1483887349000},{"_id":"source/_posts/2016-09-18-1.md","hash":"b819083458ae5c35277478b01d1c074a0a4bd9c1","modified":1484628695000},{"_id":"source/_posts/2016-09-18.md","hash":"5b8c4dac3f08e2cc7697119cbacb76b7bb5d6b67","modified":1483887377000},{"_id":"source/_posts/2016-09-19.md","hash":"c57a528abc724a0fdf98b3200fa2bd76a9c06282","modified":1484628780000},{"_id":"source/_posts/2016-09-20-1.md","hash":"fd4a06b9b32c08c1962dfebbd5f9f5c4ae3a0f2d","modified":1484628836000},{"_id":"source/_posts/2016-09-20.md","hash":"7a78c079f4e5d9bb9f92b5f09f3b2b74d31ad613","modified":1484628887000},{"_id":"source/_posts/2016-09-21.md","hash":"78602be58b9ebf979879e1e4871f57a16baf4396","modified":1483888432000},{"_id":"source/_posts/2016-09-24.md","hash":"35e50732af1bb49d640fe551629a6a7ff8ae81c2","modified":1484629004000},{"_id":"source/_posts/2016-12-26.md","hash":"8c9b69564d4fc9e8c2f0529f373361d444ce013a","modified":1483890095000},{"_id":"source/_posts/2017-01-03.md","hash":"7f72b67fb75e641e541ca8e294480325f3e3a640","modified":1483890487000},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1479645755000},{"_id":"source/_posts/2016-09-23.md","hash":"08cdf8567e0685e525b717d0d221405855c769fb","modified":1484628925000},{"_id":"source/about/index.md","hash":"758625716051e77b8e5ef374e2553af370fd31d4","modified":1484561101000},{"_id":"source/comments_list/index.md","hash":"dd9618c81991c2c0d333915778e525dbb37db4c8","modified":1484627721000},{"_id":"source/history/index.md","hash":"314c86947ed4464ca42958e0b6df18319ffa9f94","modified":1484384954000},{"_id":"themes/maupassant/.git/FETCH_HEAD","hash":"367d3822cafb784216c4a3149388062767b54b24","modified":1484642467000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1484642359000},{"_id":"themes/maupassant/.git/config","hash":"40060afe37ce847ba4f87d86c2a40806e2e151c3","modified":1484642359000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1484642359000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1479328282000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1479328282000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1479328282000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1479328282000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1479328282000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"58329d129e9cf128f3b21f74cdd23673683f0efa","modified":1484626926000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1479328282000},{"_id":"themes/maupassant/layout/.DS_Store","hash":"5ad2e31f8782e7fbede2f8b775260fcd5a91ade1","modified":1484624967000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1479328282000},{"_id":"themes/maupassant/layout/base.jade","hash":"d0934fb9b3a0e4925156c7b0249a2fc40504b52e","modified":1484540913000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1479328282000},{"_id":"themes/maupassant/layout/comments_list.jade","hash":"5759796f04a9890778d294e2eeb0c29934b2e344","modified":1484624035000},{"_id":"themes/maupassant/layout/index.jade","hash":"f842164f6cba007c1dfcd7fe7bba24736bc886a9","modified":1479328282000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1479328282000},{"_id":"themes/maupassant/layout/post.jade","hash":"970914b2fdb5ceb446887ba0f9c4f7a0f11a7919","modified":1484059321000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"7d2946330933be4a91c3fe8fa345e9030ed8334e","modified":1484623924000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1479328282000},{"_id":"themes/maupassant/source/.DS_Store","hash":"8eff8088f61b731eaae00aefe0c7bdaeee840f34","modified":1484617990000},{"_id":"themes/maupassant/source/favicon.ico","hash":"807245b96a29dc4962cfd6e1d06a466e436d6feb","modified":1484530495000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1484642359000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1484642359000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1484642359000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1484642359000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1484642359000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1484642359000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1484642359000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1484642359000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1484642359000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1484642359000},{"_id":"themes/maupassant/layout/_partial/.DS_Store","hash":"525e638c9f4b143f586be6ac32c55495af8c002e","modified":1484623379000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"b5035337d98c66d6f039da261544aad5d524a525","modified":1484381443000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1479328282000},{"_id":"themes/maupassant/layout/_partial/comments_recent.jade","hash":"b362cc9a3a4dad94bf076377835f8a54404ba2c8","modified":1484627510000},{"_id":"themes/maupassant/layout/_partial/donate.jade","hash":"c7cd354d995c969a76581c847567315f38bb4883","modified":1484059136000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1479328282000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1479328282000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1479328282000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1479328282000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1479328282000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1479328282000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1479328282000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1479328282000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1479328282000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1479328282000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1484624184000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1479328282000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1479328282000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1479328282000},{"_id":"themes/maupassant/source/css/donate.scss","hash":"41611f6b07ed17e4609310ccb81cbeb03175c7f1","modified":1484059437000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1479328282000},{"_id":"themes/maupassant/source/css/style.scss","hash":"0fdc3616c1d3bc96f93430af65a2aeaa2459bd2c","modified":1484388194000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479328282000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479328282000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479328282000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479328282000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479328282000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479328282000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1479328282000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1479328282000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1479328282000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1479328282000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1479328282000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1479328282000},{"_id":"themes/maupassant/.git/objects/pack/pack-9bd85f2b41b026b79c9973f7ec3c2438d0c44d7e.idx","hash":"02e8f245f4c346f7153be2909f19fb762a5b4dba","modified":1484642467000},{"_id":"themes/maupassant/.git/objects/pack/pack-9bd85f2b41b026b79c9973f7ec3c2438d0c44d7e.pack","hash":"d57abcd4dc24ffee12fdca4490877d6d9e84eb74","modified":1484642467000},{"_id":"public/baidu_urls.txt","hash":"1a4b66496bbf2b7a354b2256b008b9a9fa874a61","modified":1484645539273},{"_id":"public/atom.xml","hash":"0d0777436791f63fb4c180530a30820d744769f5","modified":1484645539282},{"_id":"public/sitemap.xml","hash":"0c1831e12d8f3bb02468cc95fa68141e80eb7286","modified":1484645539283},{"_id":"public/baidu_verify_MOOV1ozXk6.html","hash":"dcb8b85d5009d96ce2779861e2a53e400474469f","modified":1484645539294},{"_id":"public/comments_list/index.html","hash":"204cbc2ae905a6af82f68f12e29b80830aa46557","modified":1484645539294},{"_id":"public/about/index.html","hash":"4959e6d73e9d853ef3cda5afe83ebcb1b70d35a7","modified":1484645539294},{"_id":"public/history/index.html","hash":"6f8f1c3420f5104d009be6cf2b9a321d35a0e258","modified":1484645539294},{"_id":"public/2017/01/08/2016-09-24/index.html","hash":"37bd207f7026febc4355db8751f5ecb6f3e9f223","modified":1484645539294},{"_id":"public/2017/01/08/2016-09-23/index.html","hash":"ae224d0cae983863165465c827a874ee628aac82","modified":1484645539294},{"_id":"public/2017/01/08/2016-09-21/index.html","hash":"1d3703475ad3989b16c992442cda487ec26d0dd1","modified":1484645539294},{"_id":"public/2017/01/08/2016-09-20/index.html","hash":"ed261e607eafcc7b9d2ea56e613fa5fa2afda878","modified":1484645539294},{"_id":"public/2017/01/08/2016-09-20-1/index.html","hash":"01ff0f61f2bb88b941681be7b0e66c1f6ca96033","modified":1484645539294},{"_id":"public/2017/01/08/2016-09-19/index.html","hash":"e6e8cd4a853e958e8e6a7406eab2ffc09a01ccc5","modified":1484645539294},{"_id":"public/2017/01/08/2016-09-18-1/index.html","hash":"884323037de0d6fc3642076fb280e5a1e8c3d929","modified":1484645539294},{"_id":"public/2017/01/08/2016-09-18/index.html","hash":"57eaaeb41ef80c82fcb4502435f8ffcbc95e632f","modified":1484645539294},{"_id":"public/2017/01/08/2016-12-26/index.html","hash":"7c46a0c6467fa29efa76f1fdc4e1e618d79a155e","modified":1484645539295},{"_id":"public/archives/index.html","hash":"140efdc4c9f5a8cd6d79b2bb878d60b448d45503","modified":1484645539295},{"_id":"public/archives/2017/index.html","hash":"140efdc4c9f5a8cd6d79b2bb878d60b448d45503","modified":1484645539295},{"_id":"public/archives/2017/01/index.html","hash":"140efdc4c9f5a8cd6d79b2bb878d60b448d45503","modified":1484645539295},{"_id":"public/categories/iOS/index.html","hash":"53c9239b6d16896fd2571c9f8cdd4444cbf3dd5c","modified":1484645539295},{"_id":"public/categories/网站/index.html","hash":"fe9b075175675da24fa3010bdd3de4e25ed60bde","modified":1484645539295},{"_id":"public/index.html","hash":"1b226983d39ab225506be84a68343024a6bbdb66","modified":1484645539295},{"_id":"public/tags/Xcode/index.html","hash":"bf6ae586854232d2f6b9f2303ecd01abfe47b4e4","modified":1484645539295},{"_id":"public/tags/iOS-10/index.html","hash":"f5f9526fb831c503b4c3621ea9e2b9448456d880","modified":1484645539295},{"_id":"public/tags/支付/index.html","hash":"bbf81d89fedbe431ff35332805bd1e7e08b3b2b5","modified":1484645539295},{"_id":"public/tags/Swift/index.html","hash":"78d066c20955f5918330891953a66d20a0a7c23c","modified":1484645539295},{"_id":"public/tags/Objective-C/index.html","hash":"e2a356306812de392d21965c7ef185c04a7c785e","modified":1484645539295},{"_id":"public/tags/Xcode-8/index.html","hash":"59b6b5ee0c0506e42432c1a5a38d0b09f2f8264c","modified":1484645539295},{"_id":"public/tags/Hexo/index.html","hash":"89aceaed07b9f5d7b9b86473677ddaa2e3f1ec74","modified":1484645539295},{"_id":"public/tags/动画/index.html","hash":"9d17778bd3d04c7f3c03b3fb98046061c045fffc","modified":1484645539295},{"_id":"public/2017/01/08/2017-01-03/index.html","hash":"7d4dab30fd5e007143cb3a62182597afbce63059","modified":1484645539296},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484645539296},{"_id":"public/CNAME","hash":"fc60c17785f4f367a081966c0a5b08e51bf5a0f7","modified":1484645539303},{"_id":"public/favicon.ico","hash":"807245b96a29dc4962cfd6e1d06a466e436d6feb","modified":1484645539303},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484645539303},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484645539303},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484645539303},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484645539303},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484645539304},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484645539304},{"_id":"public/css/donate.css","hash":"f3baf114310d4706ececd2f887336a0c0636fc68","modified":1484645539346},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1484645539346},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1484645539347},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1484645539347},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1484645539347},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1484645539347},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1484645539347},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1484645539347},{"_id":"public/css/style.css","hash":"39e1a88d592940894d0c907fc85c984849f96eb1","modified":1484645539347}],"Category":[{"name":"iOS","_id":"ciy1bmbqp00058gfyqaoyna2r"},{"name":"网站","_id":"ciy1bmbrl000o8gfytzry75fa"}],"Data":[],"Page":[{"_content":"MOOV1ozXk6","source":"baidu_verify_MOOV1ozXk6.html","raw":"MOOV1ozXk6","date":"2017-01-17T08:46:34.000Z","updated":"2017-01-13T14:52:30.000Z","path":"baidu_verify_MOOV1ozXk6.html","title":"","comments":1,"layout":"page","_id":"ciy1bmbpe00008gfyn05e9vs7","content":"MOOV1ozXk6","excerpt":"","more":"MOOV1ozXk6"},{"title":"关于Me","comments":0,"_content":"邮箱：minghuihe2013@163.com\nQQ：664939053\n微信：辉\n\n\n\n<iframe src=\"http://devheminghui.cn/simple/index\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:310px;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n","source":"about/index.md","raw":"---\ntitle: 关于Me\ncomments: false\n---\n邮箱：minghuihe2013@163.com\nQQ：664939053\n微信：辉\n\n\n\n<iframe src=\"http://devheminghui.cn/simple/index\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:310px;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n","date":"2017-01-17T08:46:34.000Z","updated":"2017-01-16T10:05:01.000Z","path":"about/index.html","layout":"page","_id":"ciy1bmbqk00028gfy1kd7ofni","content":"<p>邮箱：minghuihe2013@163.com<br>QQ：664939053<br>微信：辉</p>\n<iframe src=\"http://devheminghui.cn/simple/index\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:310px;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n","excerpt":"","more":"<p>邮箱：minghuihe2013@163.com<br>QQ：664939053<br>微信：辉</p>\n<iframe src=\"http://devheminghui.cn/simple/index\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:310px;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n"},{"title":"最近评论","comments":0,"layout":"comments_list","_content":"\n\n\n","source":"comments_list/index.md","raw":"---\ntitle: 最近评论\ncomments: false\nlayout: comments_list\n---\n\n\n\n","date":"2017-01-17T08:46:34.000Z","updated":"2017-01-17T04:35:21.000Z","path":"comments_list/index.html","_id":"ciy1bmbqo00048gfylexq437e","content":"","excerpt":"","more":""},{"comments":0,"layout":"timeline","_content":"\n\n","source":"history/index.md","raw":"---\ncomments: false\nlayout: timeline\n---\n\n\n","date":"2017-01-17T08:46:34.000Z","updated":"2017-01-14T09:09:14.000Z","path":"history/index.html","title":"","_id":"ciy1bmbqw00088gfyon09855f","content":"","excerpt":"","more":""}],"Post":[{"title":"升级xcode时更换appid账户","_content":"\n安装时使用了别人提供的Xcode.dmg安装或者别人之前已经下载的，而非使用自己账号在AppStore下载的。这样的安装模式会出现一个问题，更新Xcode时AppStroe会提示让你输入下载该Xcode的账号及密码，该账号不能直接\b修改。下面的方法可以删除原有账号信息，而后可以使用新的账号信息更新。\n\n  按照如下步骤解决:\n        \n     1.打开引用程序目录\n\n     2.找到Xcode，右键“显示包内容”\n\n     3.找到_MASReceipt文件夹\n\n     4.删除它，然后退出重启AppStroe，更新Xcode即可。\n\n参考：http://blog.csdn.net/zhuzhihai1988/article/details/39803743\n\n\n","source":"_posts/2016-09-18-1.md","raw":"---\ntitle: 升级xcode时更换appid账户\ntags:\n- Xcode\ncategories: iOS\n---\n\n安装时使用了别人提供的Xcode.dmg安装或者别人之前已经下载的，而非使用自己账号在AppStore下载的。这样的安装模式会出现一个问题，更新Xcode时AppStroe会提示让你输入下载该Xcode的账号及密码，该账号不能直接\b修改。下面的方法可以删除原有账号信息，而后可以使用新的账号信息更新。\n\n  按照如下步骤解决:\n        \n     1.打开引用程序目录\n\n     2.找到Xcode，右键“显示包内容”\n\n     3.找到_MASReceipt文件夹\n\n     4.删除它，然后退出重启AppStroe，更新Xcode即可。\n\n参考：http://blog.csdn.net/zhuzhihai1988/article/details/39803743\n\n\n","slug":"2016-09-18-1","published":1,"date":"2017-01-08T15:11:40.000Z","updated":"2017-01-17T04:51:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbqd00018gfy65td7gd5","content":"<p>安装时使用了别人提供的Xcode.dmg安装或者别人之前已经下载的，而非使用自己账号在AppStore下载的。这样的安装模式会出现一个问题，更新Xcode时AppStroe会提示让你输入下载该Xcode的账号及密码，该账号不能直接\b修改。下面的方法可以删除原有账号信息，而后可以使用新的账号信息更新。</p>\n<p>  按照如下步骤解决:</p>\n<pre><code>1.打开引用程序目录\n\n2.找到Xcode，右键“显示包内容”\n\n3.找到_MASReceipt文件夹\n\n4.删除它，然后退出重启AppStroe，更新Xcode即可。\n</code></pre><p>参考：<a href=\"http://blog.csdn.net/zhuzhihai1988/article/details/39803743\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zhuzhihai1988/article/details/39803743</a></p>\n","excerpt":"","more":"<p>安装时使用了别人提供的Xcode.dmg安装或者别人之前已经下载的，而非使用自己账号在AppStore下载的。这样的安装模式会出现一个问题，更新Xcode时AppStroe会提示让你输入下载该Xcode的账号及密码，该账号不能直接\b修改。下面的方法可以删除原有账号信息，而后可以使用新的账号信息更新。</p>\n<p>  按照如下步骤解决:</p>\n<pre><code>1.打开引用程序目录\n\n2.找到Xcode，右键“显示包内容”\n\n3.找到_MASReceipt文件夹\n\n4.删除它，然后退出重启AppStroe，更新Xcode即可。\n</code></pre><p>参考：<a href=\"http://blog.csdn.net/zhuzhihai1988/article/details/39803743\">http://blog.csdn.net/zhuzhihai1988/article/details/39803743</a></p>\n"},{"title":"渠道方的支付限额是多少？","_content":"\n各渠道支付限额标准\n* 微信：微信支付限额取决于商品类别和发卡银行，虚拟类单笔限额在 1,000-3,000 元之间，实物类在 10,000-50,000 元，具体由发卡行决定，用户可以在绑定银行卡后，查看该行的具体限额。\n* 支付宝移动快捷限额取决于付款方式，参见链接：[信用卡的支付限额][1]，[储蓄卡的支付限额][2]，[余额宝的支付限额][3]。\n* 银联的支付限额取决于你的商户类型，从 500-10,000 元不等。\n* 招行一网通单笔限额 50,000 元左右\n* 百度钱包、京东支付和易宝具体限额请查看相关合作协议。\n* 应用内快捷支付（银联卡、境外卡）：详情请见快捷支付合作协议。\n\n[1]:\thttps://cshall.alipay.com/lab/help_detail.htm?help_id=387096\n[2]:\thttps://cshall.alipay.com/lab/help_detail.htm?help_id=419480\n[3]:\thttps://cshall.alipay.com/lab/cateQuestion.htm?cateId=237772&pcateId=237760\n","source":"_posts/2016-09-18.md","raw":"---\ntitle: 渠道方的支付限额是多少？\ntags:\n- 支付\ncategories: iOS\n---\n\n各渠道支付限额标准\n* 微信：微信支付限额取决于商品类别和发卡银行，虚拟类单笔限额在 1,000-3,000 元之间，实物类在 10,000-50,000 元，具体由发卡行决定，用户可以在绑定银行卡后，查看该行的具体限额。\n* 支付宝移动快捷限额取决于付款方式，参见链接：[信用卡的支付限额][1]，[储蓄卡的支付限额][2]，[余额宝的支付限额][3]。\n* 银联的支付限额取决于你的商户类型，从 500-10,000 元不等。\n* 招行一网通单笔限额 50,000 元左右\n* 百度钱包、京东支付和易宝具体限额请查看相关合作协议。\n* 应用内快捷支付（银联卡、境外卡）：详情请见快捷支付合作协议。\n\n[1]:\thttps://cshall.alipay.com/lab/help_detail.htm?help_id=387096\n[2]:\thttps://cshall.alipay.com/lab/help_detail.htm?help_id=419480\n[3]:\thttps://cshall.alipay.com/lab/cateQuestion.htm?cateId=237772&pcateId=237760\n","slug":"2016-09-18","published":1,"date":"2017-01-08T14:56:17.000Z","updated":"2017-01-08T14:56:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbqm00038gfyyswczs2w","content":"<p>各渠道支付限额标准</p>\n<ul>\n<li>微信：微信支付限额取决于商品类别和发卡银行，虚拟类单笔限额在 1,000-3,000 元之间，实物类在 10,000-50,000 元，具体由发卡行决定，用户可以在绑定银行卡后，查看该行的具体限额。</li>\n<li>支付宝移动快捷限额取决于付款方式，参见链接：<a href=\"https://cshall.alipay.com/lab/help_detail.htm?help_id=387096\" target=\"_blank\" rel=\"external\">信用卡的支付限额</a>，<a href=\"https://cshall.alipay.com/lab/help_detail.htm?help_id=419480\" target=\"_blank\" rel=\"external\">储蓄卡的支付限额</a>，<a href=\"https://cshall.alipay.com/lab/cateQuestion.htm?cateId=237772&amp;pcateId=237760\" target=\"_blank\" rel=\"external\">余额宝的支付限额</a>。</li>\n<li>银联的支付限额取决于你的商户类型，从 500-10,000 元不等。</li>\n<li>招行一网通单笔限额 50,000 元左右</li>\n<li>百度钱包、京东支付和易宝具体限额请查看相关合作协议。</li>\n<li>应用内快捷支付（银联卡、境外卡）：详情请见快捷支付合作协议。</li>\n</ul>\n","excerpt":"","more":"<p>各渠道支付限额标准</p>\n<ul>\n<li>微信：微信支付限额取决于商品类别和发卡银行，虚拟类单笔限额在 1,000-3,000 元之间，实物类在 10,000-50,000 元，具体由发卡行决定，用户可以在绑定银行卡后，查看该行的具体限额。</li>\n<li>支付宝移动快捷限额取决于付款方式，参见链接：<a href=\"https://cshall.alipay.com/lab/help_detail.htm?help_id=387096\">信用卡的支付限额</a>，<a href=\"https://cshall.alipay.com/lab/help_detail.htm?help_id=419480\">储蓄卡的支付限额</a>，<a href=\"https://cshall.alipay.com/lab/cateQuestion.htm?cateId=237772&amp;pcateId=237760\">余额宝的支付限额</a>。</li>\n<li>银联的支付限额取决于你的商户类型，从 500-10,000 元不等。</li>\n<li>招行一网通单笔限额 50,000 元左右</li>\n<li>百度钱包、京东支付和易宝具体限额请查看相关合作协议。</li>\n<li>应用内快捷支付（银联卡、境外卡）：详情请见快捷支付合作协议。</li>\n</ul>\n"},{"title":"兼容iOS 10","_content":"\n![](http://im5.tongbu.com/ArticleImage/bd76d138-f.jpg?w=480,343)\n\n*  配置获取隐私数据权限声明\n\niOS 10的一大变化是更强的隐私数据保护,需要配置获取隐私数据权限声明,简单的说访问用户数据都需要现在Info.plist中声明，否则会crash。\n\n需要声明的用户数据如下：\n> Contacts, Calendar, Reminders, Photos, Bluetooth Sharing, Microphone, Camera, Location, Health, HomeKit, Media Library, Motion, CallKit, Speech Recognition, SiriKit, TV Provider.\n\ninfo.plist文件中配置方式如下：\n\n![](https://lh3.googleusercontent.com/5Wbr58_bsdRRaRhGf9ElM24zohExOndGDJ2gN6-Nf7GRVQddAI_Lg0QGkCrHFza--Tx0ImT4E8qm_dQ0CD_jSA6tr7vj9g60nsXRLyO8nd5Ya3yZRpwbEx542x8q9WUkXgoycG9AW_1A2cBxH1D5DG2OOXHZBmASOSq09Em6yRYEbtjeRSPw1c3ZE1zJ1BUWPSHIIwHknFZwbmNXhAPgYSyNDfE-3x383o6V4nHd7Q-mUyUsl-wjegnumcMKprZ53HgsAWHNMAzvboEK4tBIsp-oNWAbOHTyg2NUHGE4BWzqCseiT7gNtYKkxyPwVcXTkTayWX3tV7THFTGOiWMzqw6SeExeLH-CkMo2sCm8l2qX-Kg24gmpBlNRLabRxuojBxNfNG5Pbw3Q3wzyWNPpBfJ2GM0nRWGIZv5LovYnL_cag6OI-t5nkBgSBF6RhqrM-Gs7BRcype0cMAJyjhfiM7j1k8X1fZKgPQSrp4DbiEMvuqRsZJ0fdzJVRNPVBBEfUnreroUDfCWfsHneyV0RMDFrp7lkj1E-CcuZ6i-6FrAL42aDfKHyYv5MRqBWlJNhIkzSBCBAVZ1sK9RmGZV40Dpfih8Xg2NJat9sE_chiD79IP0=w560-h260-no)\n\n添加一个属性，输入Privacy后就会出现自动提示，xcode 8 已经有了相关的自动补全功能。\n*注意：描述内容为空时，不能通过苹果审核*。\n\n* ATS的问题\n\niOS 9中默认非HTTPS的网络请求时被禁止的，当然可以通过把NSAllowArbitraryLoads设为YES来禁用ATS，但是从2017年1月1日起苹果不允许通过这个方式绕过ATS，要求强制使用HTTPS，否则提交审核会被拒绝，但是作为过渡，可以使用NSExceptionDomains添加特定域名开放HTTP，这样比较容易通过审核，但是需要在提交时做说明。\n\n参考文章：[关于iOS 10中ATS的问题](https://onevcat.com/2016/06/ios-10-ats/)\n\n","source":"_posts/2016-09-19.md","raw":"---\ntitle: 兼容iOS 10\ntags:\n- iOS 10\ncategories: iOS\n---\n\n![](http://im5.tongbu.com/ArticleImage/bd76d138-f.jpg?w=480,343)\n\n*  配置获取隐私数据权限声明\n\niOS 10的一大变化是更强的隐私数据保护,需要配置获取隐私数据权限声明,简单的说访问用户数据都需要现在Info.plist中声明，否则会crash。\n\n需要声明的用户数据如下：\n> Contacts, Calendar, Reminders, Photos, Bluetooth Sharing, Microphone, Camera, Location, Health, HomeKit, Media Library, Motion, CallKit, Speech Recognition, SiriKit, TV Provider.\n\ninfo.plist文件中配置方式如下：\n\n![](https://lh3.googleusercontent.com/5Wbr58_bsdRRaRhGf9ElM24zohExOndGDJ2gN6-Nf7GRVQddAI_Lg0QGkCrHFza--Tx0ImT4E8qm_dQ0CD_jSA6tr7vj9g60nsXRLyO8nd5Ya3yZRpwbEx542x8q9WUkXgoycG9AW_1A2cBxH1D5DG2OOXHZBmASOSq09Em6yRYEbtjeRSPw1c3ZE1zJ1BUWPSHIIwHknFZwbmNXhAPgYSyNDfE-3x383o6V4nHd7Q-mUyUsl-wjegnumcMKprZ53HgsAWHNMAzvboEK4tBIsp-oNWAbOHTyg2NUHGE4BWzqCseiT7gNtYKkxyPwVcXTkTayWX3tV7THFTGOiWMzqw6SeExeLH-CkMo2sCm8l2qX-Kg24gmpBlNRLabRxuojBxNfNG5Pbw3Q3wzyWNPpBfJ2GM0nRWGIZv5LovYnL_cag6OI-t5nkBgSBF6RhqrM-Gs7BRcype0cMAJyjhfiM7j1k8X1fZKgPQSrp4DbiEMvuqRsZJ0fdzJVRNPVBBEfUnreroUDfCWfsHneyV0RMDFrp7lkj1E-CcuZ6i-6FrAL42aDfKHyYv5MRqBWlJNhIkzSBCBAVZ1sK9RmGZV40Dpfih8Xg2NJat9sE_chiD79IP0=w560-h260-no)\n\n添加一个属性，输入Privacy后就会出现自动提示，xcode 8 已经有了相关的自动补全功能。\n*注意：描述内容为空时，不能通过苹果审核*。\n\n* ATS的问题\n\niOS 9中默认非HTTPS的网络请求时被禁止的，当然可以通过把NSAllowArbitraryLoads设为YES来禁用ATS，但是从2017年1月1日起苹果不允许通过这个方式绕过ATS，要求强制使用HTTPS，否则提交审核会被拒绝，但是作为过渡，可以使用NSExceptionDomains添加特定域名开放HTTP，这样比较容易通过审核，但是需要在提交时做说明。\n\n参考文章：[关于iOS 10中ATS的问题](https://onevcat.com/2016/06/ios-10-ats/)\n\n","slug":"2016-09-19","published":1,"date":"2017-01-08T15:12:17.000Z","updated":"2017-01-17T04:53:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbqt00078gfy0o4dfsz6","content":"<p><img src=\"http://im5.tongbu.com/ArticleImage/bd76d138-f.jpg?w=480,343\" alt=\"\"></p>\n<ul>\n<li>配置获取隐私数据权限声明</li>\n</ul>\n<p>iOS 10的一大变化是更强的隐私数据保护,需要配置获取隐私数据权限声明,简单的说访问用户数据都需要现在Info.plist中声明，否则会crash。</p>\n<p>需要声明的用户数据如下：</p>\n<blockquote>\n<p>Contacts, Calendar, Reminders, Photos, Bluetooth Sharing, Microphone, Camera, Location, Health, HomeKit, Media Library, Motion, CallKit, Speech Recognition, SiriKit, TV Provider.</p>\n</blockquote>\n<p>info.plist文件中配置方式如下：</p>\n<p><img src=\"https://lh3.googleusercontent.com/5Wbr58_bsdRRaRhGf9ElM24zohExOndGDJ2gN6-Nf7GRVQddAI_Lg0QGkCrHFza--Tx0ImT4E8qm_dQ0CD_jSA6tr7vj9g60nsXRLyO8nd5Ya3yZRpwbEx542x8q9WUkXgoycG9AW_1A2cBxH1D5DG2OOXHZBmASOSq09Em6yRYEbtjeRSPw1c3ZE1zJ1BUWPSHIIwHknFZwbmNXhAPgYSyNDfE-3x383o6V4nHd7Q-mUyUsl-wjegnumcMKprZ53HgsAWHNMAzvboEK4tBIsp-oNWAbOHTyg2NUHGE4BWzqCseiT7gNtYKkxyPwVcXTkTayWX3tV7THFTGOiWMzqw6SeExeLH-CkMo2sCm8l2qX-Kg24gmpBlNRLabRxuojBxNfNG5Pbw3Q3wzyWNPpBfJ2GM0nRWGIZv5LovYnL_cag6OI-t5nkBgSBF6RhqrM-Gs7BRcype0cMAJyjhfiM7j1k8X1fZKgPQSrp4DbiEMvuqRsZJ0fdzJVRNPVBBEfUnreroUDfCWfsHneyV0RMDFrp7lkj1E-CcuZ6i-6FrAL42aDfKHyYv5MRqBWlJNhIkzSBCBAVZ1sK9RmGZV40Dpfih8Xg2NJat9sE_chiD79IP0=w560-h260-no\" alt=\"\"></p>\n<p>添加一个属性，输入Privacy后就会出现自动提示，xcode 8 已经有了相关的自动补全功能。<br><em>注意：描述内容为空时，不能通过苹果审核</em>。</p>\n<ul>\n<li>ATS的问题</li>\n</ul>\n<p>iOS 9中默认非HTTPS的网络请求时被禁止的，当然可以通过把NSAllowArbitraryLoads设为YES来禁用ATS，但是从2017年1月1日起苹果不允许通过这个方式绕过ATS，要求强制使用HTTPS，否则提交审核会被拒绝，但是作为过渡，可以使用NSExceptionDomains添加特定域名开放HTTP，这样比较容易通过审核，但是需要在提交时做说明。</p>\n<p>参考文章：<a href=\"https://onevcat.com/2016/06/ios-10-ats/\" target=\"_blank\" rel=\"external\">关于iOS 10中ATS的问题</a></p>\n","excerpt":"","more":"<p><img src=\"http://im5.tongbu.com/ArticleImage/bd76d138-f.jpg?w=480,343\" alt=\"\"></p>\n<ul>\n<li>配置获取隐私数据权限声明</li>\n</ul>\n<p>iOS 10的一大变化是更强的隐私数据保护,需要配置获取隐私数据权限声明,简单的说访问用户数据都需要现在Info.plist中声明，否则会crash。</p>\n<p>需要声明的用户数据如下：</p>\n<blockquote>\n<p>Contacts, Calendar, Reminders, Photos, Bluetooth Sharing, Microphone, Camera, Location, Health, HomeKit, Media Library, Motion, CallKit, Speech Recognition, SiriKit, TV Provider.</p>\n</blockquote>\n<p>info.plist文件中配置方式如下：</p>\n<p><img src=\"https://lh3.googleusercontent.com/5Wbr58_bsdRRaRhGf9ElM24zohExOndGDJ2gN6-Nf7GRVQddAI_Lg0QGkCrHFza--Tx0ImT4E8qm_dQ0CD_jSA6tr7vj9g60nsXRLyO8nd5Ya3yZRpwbEx542x8q9WUkXgoycG9AW_1A2cBxH1D5DG2OOXHZBmASOSq09Em6yRYEbtjeRSPw1c3ZE1zJ1BUWPSHIIwHknFZwbmNXhAPgYSyNDfE-3x383o6V4nHd7Q-mUyUsl-wjegnumcMKprZ53HgsAWHNMAzvboEK4tBIsp-oNWAbOHTyg2NUHGE4BWzqCseiT7gNtYKkxyPwVcXTkTayWX3tV7THFTGOiWMzqw6SeExeLH-CkMo2sCm8l2qX-Kg24gmpBlNRLabRxuojBxNfNG5Pbw3Q3wzyWNPpBfJ2GM0nRWGIZv5LovYnL_cag6OI-t5nkBgSBF6RhqrM-Gs7BRcype0cMAJyjhfiM7j1k8X1fZKgPQSrp4DbiEMvuqRsZJ0fdzJVRNPVBBEfUnreroUDfCWfsHneyV0RMDFrp7lkj1E-CcuZ6i-6FrAL42aDfKHyYv5MRqBWlJNhIkzSBCBAVZ1sK9RmGZV40Dpfih8Xg2NJat9sE_chiD79IP0=w560-h260-no\" alt=\"\"></p>\n<p>添加一个属性，输入Privacy后就会出现自动提示，xcode 8 已经有了相关的自动补全功能。<br><em>注意：描述内容为空时，不能通过苹果审核</em>。</p>\n<ul>\n<li>ATS的问题</li>\n</ul>\n<p>iOS 9中默认非HTTPS的网络请求时被禁止的，当然可以通过把NSAllowArbitraryLoads设为YES来禁用ATS，但是从2017年1月1日起苹果不允许通过这个方式绕过ATS，要求强制使用HTTPS，否则提交审核会被拒绝，但是作为过渡，可以使用NSExceptionDomains添加特定域名开放HTTP，这样比较容易通过审核，但是需要在提交时做说明。</p>\n<p>参考文章：<a href=\"https://onevcat.com/2016/06/ios-10-ats/\">关于iOS 10中ATS的问题</a></p>\n"},{"title":"Swift/OC混编之道","_content":"\n*  在Swift项目中使用OC，在OC项目中使用Swift\n\n首先，在工程的 `Build Settings` 中把` defines module` 设为 `YES`.\n\n\n![](https://lh3.googleusercontent.com/CoJJzYbtcHkNMzk-6fHmGCxVFmvZE2a0l31IW1Fvyz1xiu8IMwcIx-FgjNW39WNwDpEiVZP01zJ4aWdNyfzLAzS8woL6nzMACsQN4vyGSHrKlhovC6hpYY5s9DXrX1XS1a-__mF79TmddooeryqrKzIgs3NSwvExCHFsPWAnMEinx180PB_8p7Y2humw_ErwT0xaYZiELJrXvclG5hLpZCo0uq7OFwt9wkBz4eXrcDA6HhCiEgvUMq81qyLvlqSAmMC7w5X8tWrnnkrFP4Fgdxn728KPp-mi-AplgNOXn1zgXWzFZKwReMwLSrykvJ3Idl1FB9-LPVXO6fpseRk_Xfdzd40PcaB7q4q8RuDTAJiBbcpbBPBy1Uj2A1MFdwA714fchTZYBRw3Ke2T2v7E2RnVWV_ud2NEsdRP-LyTcrHeq12hn41Hn_oIx8IFPDT2Np2EZq7AIhZYR5ejjxZeHJDyq_KRC76zMXH8vsizxM1WXqHMKATkvWeEb2Erb92JvR49aZlo3Ngh_YQEoVY6SLFT94frzIr3RPXEfALU-GgMxrcfHvUp404P9zmpKMLd8HxkxV5cSHuXSqPLOHZEQb6xQ476shYBsBh8_YlmRp_qOJE=w958-h242-no)\n\n\n\n然后，把` product module name `设置为项目工程的名字。\n\n![](https://lh3.googleusercontent.com/pgXi29HgcxWPqhFWDszf1Z5lPqKM6G0bA9HcnqJSersttVZMlqeGLZS0NjL5ypTcMyD5A_GbeGDtqCHYTyrvdBkyfBirsR2ZRovZh4796zdsCb8CV2jqrW5dU5947I5Zx7bJCNwEeK5leE89xj3VLbgMYcUo0gSe-Er6hvxQZky0cTR7spg_GFA2_6N1H9raDHxiaTFZVXasGKEXVtAMHh0h5dx0rdBw2zw1p-ZIRV-HLRRYhuLS43t2EQVoiCyEc0Srbt_h1zkWAfPCIWHPgjVre2cpYpwmdDwxNr7tUmjjXOeaJXYVq9snLshfY3ca2gFTXm7QizBmHxwzvH4fjVSaG94nlWzTHFl7NkGfnbHSE_6wnPhIjYZbtbrDOZvDBQVNxUzweaG4HK3ZjkTHe8JPoOnu9bEkBrZq3I05MDa-7sP1eLM-AWp0w2WhwFVD6UM7ELWw1WKPe57mEKQxKYLlnk_J_xvvOGVjojUikyyJQioHhoeTQqskpOhpDZa6Y2oLHS-jZFGKrdgp_wVtAy2pKFZoYxpktwQ7wLJZHFpVaGcXrhTZNaZzVJXUO3wlWhcHX3gITDyAOdWmh7mghKGS2kyYbPs14c2yCvVreK3lWWc=w961-h330-no)\n\n\n后续实践更新中...\n\n\n","source":"_posts/2016-09-20-1.md","raw":"---\ntitle: Swift/OC混编之道\ntags:\n- Swift\n- Objective-C\ncategories: iOS\n---\n\n*  在Swift项目中使用OC，在OC项目中使用Swift\n\n首先，在工程的 `Build Settings` 中把` defines module` 设为 `YES`.\n\n\n![](https://lh3.googleusercontent.com/CoJJzYbtcHkNMzk-6fHmGCxVFmvZE2a0l31IW1Fvyz1xiu8IMwcIx-FgjNW39WNwDpEiVZP01zJ4aWdNyfzLAzS8woL6nzMACsQN4vyGSHrKlhovC6hpYY5s9DXrX1XS1a-__mF79TmddooeryqrKzIgs3NSwvExCHFsPWAnMEinx180PB_8p7Y2humw_ErwT0xaYZiELJrXvclG5hLpZCo0uq7OFwt9wkBz4eXrcDA6HhCiEgvUMq81qyLvlqSAmMC7w5X8tWrnnkrFP4Fgdxn728KPp-mi-AplgNOXn1zgXWzFZKwReMwLSrykvJ3Idl1FB9-LPVXO6fpseRk_Xfdzd40PcaB7q4q8RuDTAJiBbcpbBPBy1Uj2A1MFdwA714fchTZYBRw3Ke2T2v7E2RnVWV_ud2NEsdRP-LyTcrHeq12hn41Hn_oIx8IFPDT2Np2EZq7AIhZYR5ejjxZeHJDyq_KRC76zMXH8vsizxM1WXqHMKATkvWeEb2Erb92JvR49aZlo3Ngh_YQEoVY6SLFT94frzIr3RPXEfALU-GgMxrcfHvUp404P9zmpKMLd8HxkxV5cSHuXSqPLOHZEQb6xQ476shYBsBh8_YlmRp_qOJE=w958-h242-no)\n\n\n\n然后，把` product module name `设置为项目工程的名字。\n\n![](https://lh3.googleusercontent.com/pgXi29HgcxWPqhFWDszf1Z5lPqKM6G0bA9HcnqJSersttVZMlqeGLZS0NjL5ypTcMyD5A_GbeGDtqCHYTyrvdBkyfBirsR2ZRovZh4796zdsCb8CV2jqrW5dU5947I5Zx7bJCNwEeK5leE89xj3VLbgMYcUo0gSe-Er6hvxQZky0cTR7spg_GFA2_6N1H9raDHxiaTFZVXasGKEXVtAMHh0h5dx0rdBw2zw1p-ZIRV-HLRRYhuLS43t2EQVoiCyEc0Srbt_h1zkWAfPCIWHPgjVre2cpYpwmdDwxNr7tUmjjXOeaJXYVq9snLshfY3ca2gFTXm7QizBmHxwzvH4fjVSaG94nlWzTHFl7NkGfnbHSE_6wnPhIjYZbtbrDOZvDBQVNxUzweaG4HK3ZjkTHe8JPoOnu9bEkBrZq3I05MDa-7sP1eLM-AWp0w2WhwFVD6UM7ELWw1WKPe57mEKQxKYLlnk_J_xvvOGVjojUikyyJQioHhoeTQqskpOhpDZa6Y2oLHS-jZFGKrdgp_wVtAy2pKFZoYxpktwQ7wLJZHFpVaGcXrhTZNaZzVJXUO3wlWhcHX3gITDyAOdWmh7mghKGS2kyYbPs14c2yCvVreK3lWWc=w961-h330-no)\n\n\n后续实践更新中...\n\n\n","slug":"2016-09-20-1","published":1,"date":"2017-01-08T15:13:10.000Z","updated":"2017-01-17T04:53:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbr000098gfy5rfws810","content":"<ul>\n<li>在Swift项目中使用OC，在OC项目中使用Swift</li>\n</ul>\n<p>首先，在工程的 <code>Build Settings</code> 中把<code>defines module</code> 设为 <code>YES</code>.</p>\n<p><img src=\"https://lh3.googleusercontent.com/CoJJzYbtcHkNMzk-6fHmGCxVFmvZE2a0l31IW1Fvyz1xiu8IMwcIx-FgjNW39WNwDpEiVZP01zJ4aWdNyfzLAzS8woL6nzMACsQN4vyGSHrKlhovC6hpYY5s9DXrX1XS1a-__mF79TmddooeryqrKzIgs3NSwvExCHFsPWAnMEinx180PB_8p7Y2humw_ErwT0xaYZiELJrXvclG5hLpZCo0uq7OFwt9wkBz4eXrcDA6HhCiEgvUMq81qyLvlqSAmMC7w5X8tWrnnkrFP4Fgdxn728KPp-mi-AplgNOXn1zgXWzFZKwReMwLSrykvJ3Idl1FB9-LPVXO6fpseRk_Xfdzd40PcaB7q4q8RuDTAJiBbcpbBPBy1Uj2A1MFdwA714fchTZYBRw3Ke2T2v7E2RnVWV_ud2NEsdRP-LyTcrHeq12hn41Hn_oIx8IFPDT2Np2EZq7AIhZYR5ejjxZeHJDyq_KRC76zMXH8vsizxM1WXqHMKATkvWeEb2Erb92JvR49aZlo3Ngh_YQEoVY6SLFT94frzIr3RPXEfALU-GgMxrcfHvUp404P9zmpKMLd8HxkxV5cSHuXSqPLOHZEQb6xQ476shYBsBh8_YlmRp_qOJE=w958-h242-no\" alt=\"\"></p>\n<p>然后，把<code>product module name</code>设置为项目工程的名字。</p>\n<p><img src=\"https://lh3.googleusercontent.com/pgXi29HgcxWPqhFWDszf1Z5lPqKM6G0bA9HcnqJSersttVZMlqeGLZS0NjL5ypTcMyD5A_GbeGDtqCHYTyrvdBkyfBirsR2ZRovZh4796zdsCb8CV2jqrW5dU5947I5Zx7bJCNwEeK5leE89xj3VLbgMYcUo0gSe-Er6hvxQZky0cTR7spg_GFA2_6N1H9raDHxiaTFZVXasGKEXVtAMHh0h5dx0rdBw2zw1p-ZIRV-HLRRYhuLS43t2EQVoiCyEc0Srbt_h1zkWAfPCIWHPgjVre2cpYpwmdDwxNr7tUmjjXOeaJXYVq9snLshfY3ca2gFTXm7QizBmHxwzvH4fjVSaG94nlWzTHFl7NkGfnbHSE_6wnPhIjYZbtbrDOZvDBQVNxUzweaG4HK3ZjkTHe8JPoOnu9bEkBrZq3I05MDa-7sP1eLM-AWp0w2WhwFVD6UM7ELWw1WKPe57mEKQxKYLlnk_J_xvvOGVjojUikyyJQioHhoeTQqskpOhpDZa6Y2oLHS-jZFGKrdgp_wVtAy2pKFZoYxpktwQ7wLJZHFpVaGcXrhTZNaZzVJXUO3wlWhcHX3gITDyAOdWmh7mghKGS2kyYbPs14c2yCvVreK3lWWc=w961-h330-no\" alt=\"\"></p>\n<p>后续实践更新中…</p>\n","excerpt":"","more":"<ul>\n<li>在Swift项目中使用OC，在OC项目中使用Swift</li>\n</ul>\n<p>首先，在工程的 <code>Build Settings</code> 中把<code>defines module</code> 设为 <code>YES</code>.</p>\n<p><img src=\"https://lh3.googleusercontent.com/CoJJzYbtcHkNMzk-6fHmGCxVFmvZE2a0l31IW1Fvyz1xiu8IMwcIx-FgjNW39WNwDpEiVZP01zJ4aWdNyfzLAzS8woL6nzMACsQN4vyGSHrKlhovC6hpYY5s9DXrX1XS1a-__mF79TmddooeryqrKzIgs3NSwvExCHFsPWAnMEinx180PB_8p7Y2humw_ErwT0xaYZiELJrXvclG5hLpZCo0uq7OFwt9wkBz4eXrcDA6HhCiEgvUMq81qyLvlqSAmMC7w5X8tWrnnkrFP4Fgdxn728KPp-mi-AplgNOXn1zgXWzFZKwReMwLSrykvJ3Idl1FB9-LPVXO6fpseRk_Xfdzd40PcaB7q4q8RuDTAJiBbcpbBPBy1Uj2A1MFdwA714fchTZYBRw3Ke2T2v7E2RnVWV_ud2NEsdRP-LyTcrHeq12hn41Hn_oIx8IFPDT2Np2EZq7AIhZYR5ejjxZeHJDyq_KRC76zMXH8vsizxM1WXqHMKATkvWeEb2Erb92JvR49aZlo3Ngh_YQEoVY6SLFT94frzIr3RPXEfALU-GgMxrcfHvUp404P9zmpKMLd8HxkxV5cSHuXSqPLOHZEQb6xQ476shYBsBh8_YlmRp_qOJE=w958-h242-no\" alt=\"\"></p>\n<p>然后，把<code>product module name</code>设置为项目工程的名字。</p>\n<p><img src=\"https://lh3.googleusercontent.com/pgXi29HgcxWPqhFWDszf1Z5lPqKM6G0bA9HcnqJSersttVZMlqeGLZS0NjL5ypTcMyD5A_GbeGDtqCHYTyrvdBkyfBirsR2ZRovZh4796zdsCb8CV2jqrW5dU5947I5Zx7bJCNwEeK5leE89xj3VLbgMYcUo0gSe-Er6hvxQZky0cTR7spg_GFA2_6N1H9raDHxiaTFZVXasGKEXVtAMHh0h5dx0rdBw2zw1p-ZIRV-HLRRYhuLS43t2EQVoiCyEc0Srbt_h1zkWAfPCIWHPgjVre2cpYpwmdDwxNr7tUmjjXOeaJXYVq9snLshfY3ca2gFTXm7QizBmHxwzvH4fjVSaG94nlWzTHFl7NkGfnbHSE_6wnPhIjYZbtbrDOZvDBQVNxUzweaG4HK3ZjkTHe8JPoOnu9bEkBrZq3I05MDa-7sP1eLM-AWp0w2WhwFVD6UM7ELWw1WKPe57mEKQxKYLlnk_J_xvvOGVjojUikyyJQioHhoeTQqskpOhpDZa6Y2oLHS-jZFGKrdgp_wVtAy2pKFZoYxpktwQ7wLJZHFpVaGcXrhTZNaZzVJXUO3wlWhcHX3gITDyAOdWmh7mghKGS2kyYbPs14c2yCvVreK3lWWc=w961-h330-no\" alt=\"\"></p>\n<p>后续实践更新中…</p>\n"},{"title":"Xcode 8 新特性","_content":"*  如何消除Xcode 8 自带打印的日志\n\n参考文章：http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs\n\n\n\n\n","source":"_posts/2016-09-20.md","raw":"---\ntitle: Xcode 8 新特性\ntags:\n- Xcode 8\ncategories: iOS\n---\n*  如何消除Xcode 8 自带打印的日志\n\n参考文章：http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs\n\n\n\n\n","slug":"2016-09-20","published":1,"date":"2017-01-08T15:13:39.000Z","updated":"2017-01-17T04:54:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbr1000a8gfytl0awb9q","content":"<ul>\n<li>如何消除Xcode 8 自带打印的日志</li>\n</ul>\n<p>参考文章：<a href=\"http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs</a></p>\n","excerpt":"","more":"<ul>\n<li>如何消除Xcode 8 自带打印的日志</li>\n</ul>\n<p>参考文章：<a href=\"http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs\">http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs</a></p>\n"},{"title":"Carthage包管理体验及常见swift库","_content":"\nCoaoaPods 是一套整体解决方案，我们在 Podfile 中指定好我们需要的第三方库。然后 CocoaPods 就会进行下载，集成，然后修改或者创建我们项目的 workspace 文件，这一系列整体操作。\n\n相比之下，Carthage 就要轻量很多，它也会一个叫做 Cartfile 描述文件，但 Carthage 不会对我们的项目结构进行任何修改，更不多创建 workspace。它只是根据我们描述文件中配置的第三方库，将他们下载到本地，然后使用 xcodebuild 构建成 framework 文件。然后由我们自己将这些库集成到项目中。Carthage 使用的是一种**非侵入性**的哲学。\n\n具体使用如下：[http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/](http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/)\n\n#### 常见swift第三方库(会不断更新)\n\n[Alamofire](https://github.com/Alamofire/Alamofire)（swift版的AFN）\n\n\n\n","source":"_posts/2016-09-21.md","raw":"---\ntitle: Carthage包管理体验及常见swift库\ntags:\n- Swift\ncategories: iOS\n---\n\nCoaoaPods 是一套整体解决方案，我们在 Podfile 中指定好我们需要的第三方库。然后 CocoaPods 就会进行下载，集成，然后修改或者创建我们项目的 workspace 文件，这一系列整体操作。\n\n相比之下，Carthage 就要轻量很多，它也会一个叫做 Cartfile 描述文件，但 Carthage 不会对我们的项目结构进行任何修改，更不多创建 workspace。它只是根据我们描述文件中配置的第三方库，将他们下载到本地，然后使用 xcodebuild 构建成 framework 文件。然后由我们自己将这些库集成到项目中。Carthage 使用的是一种**非侵入性**的哲学。\n\n具体使用如下：[http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/](http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/)\n\n#### 常见swift第三方库(会不断更新)\n\n[Alamofire](https://github.com/Alamofire/Alamofire)（swift版的AFN）\n\n\n\n","slug":"2016-09-21","published":1,"date":"2017-01-08T15:13:52.000Z","updated":"2017-01-08T15:13:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbr5000e8gfyws97dj5l","content":"<p>CoaoaPods 是一套整体解决方案，我们在 Podfile 中指定好我们需要的第三方库。然后 CocoaPods 就会进行下载，集成，然后修改或者创建我们项目的 workspace 文件，这一系列整体操作。</p>\n<p>相比之下，Carthage 就要轻量很多，它也会一个叫做 Cartfile 描述文件，但 Carthage 不会对我们的项目结构进行任何修改，更不多创建 workspace。它只是根据我们描述文件中配置的第三方库，将他们下载到本地，然后使用 xcodebuild 构建成 framework 文件。然后由我们自己将这些库集成到项目中。Carthage 使用的是一种<strong>非侵入性</strong>的哲学。</p>\n<p>具体使用如下：<a href=\"http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/\" target=\"_blank\" rel=\"external\">http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/</a></p>\n<h4 id=\"常见swift第三方库-会不断更新\"><a href=\"#常见swift第三方库-会不断更新\" class=\"headerlink\" title=\"常见swift第三方库(会不断更新)\"></a>常见swift第三方库(会不断更新)</h4><p><a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"external\">Alamofire</a>（swift版的AFN）</p>\n","excerpt":"","more":"<p>CoaoaPods 是一套整体解决方案，我们在 Podfile 中指定好我们需要的第三方库。然后 CocoaPods 就会进行下载，集成，然后修改或者创建我们项目的 workspace 文件，这一系列整体操作。</p>\n<p>相比之下，Carthage 就要轻量很多，它也会一个叫做 Cartfile 描述文件，但 Carthage 不会对我们的项目结构进行任何修改，更不多创建 workspace。它只是根据我们描述文件中配置的第三方库，将他们下载到本地，然后使用 xcodebuild 构建成 framework 文件。然后由我们自己将这些库集成到项目中。Carthage 使用的是一种<strong>非侵入性</strong>的哲学。</p>\n<p>具体使用如下：<a href=\"http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/\">http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/</a></p>\n<h4 id=\"常见swift第三方库-会不断更新\"><a href=\"#常见swift第三方库-会不断更新\" class=\"headerlink\" title=\"常见swift第三方库(会不断更新)\"></a>常见swift第三方库(会不断更新)</h4><p><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a>（swift版的AFN）</p>\n"},{"title":"如何使用hexo搭建个人站","_content":"\nhexo是基于Node.js的静态网页生成工具，对不具有前端技术经验的童鞋来说，也能很好的搭建个人站\n\n*  第一步：准备\n\n1. 安装`hexo`之前，需要先安装好`Node.js`,安装Node只需要去官网下载相应安装文件安装即可，推荐下载最新的版本；\n2. 安装`Git`(Mac自带了已经)\n3. 备好`github`账号，最好配置好`SSH Keys`（不懂如何配置ssh的童鞋，[这里看](http://www.cnblogs.com/ayseeing/p/3572582.html)）\n\n*  第二步：本地化\n\n1. 安装`Hexo`\n    \n    ```\n    npm install -g hexo\n    ```\n\n2. 初始化`Hexo`，指定一个目录执行命令\n\n    ```\n    hexo init\n    ```\n\n3. 生成静态页面，在初始化的目录执行命令\n\n    ```\n    hexo  generate  或者 hexo g\n    ```\n执行生成静态页面命令之前，最好先执行下面命令，清除缓存，,避免不必要的奇怪问题\n\n    ```\n    hexo clean\n    ```\n生成的静态页面在`hexo/public` 目录中\n\n4. 本地启动，启动本地`service`，进行本地预览和调试\n\n    ```\n    hexo server  或者 hexo s\n    ```\n这步可能会提示各种错误，最常见的错误和解决办法如下\n\n    ```\n    错误：ERROR Plugin load failed: hexo-server\n    解决方法，执行命令: sudo npm install hexo-server\n    \n    错误： Usage: hexo ...\n    解决方法，执行命令： npm install hexo-server --save\n    ```\n    \n*  第三步：发布到远程GitHub\n\n1. 新建远程仓库，注意仓库名称必须为：`your_github_userName.github.io` 固定写法    \n2. 接下来，我们需要修改`_config.yml`来和远程仓库建立关联，在文件下面修改为\n    \n    ```\n    deploy:\n       type: git \n       repo: https://github.com/leopardpan/your_github_userName.github.io.git \n       branch: master\n    ```\n注意：如果你使用了`SSH`，写法稍有不同，应该写成\n\n    ```\n    deploy:\n      type: git\n      repo: git@github.com:your_github_userName/your_github_userName.github.io.git\n      branch: master\n    ```\n\n3. 最后执行如下命令，将本地文件发布到远程`github`仓库\n\n    ```\n    hexo deploy\n    ```\n    浏览器中打开 `http://your_github_userName.github.io/` ,搭建基本完成\n\n*  第四步：其他配置\n\n1.  配置主题\n可以找几个不错的主题来试试，我个人使用的是相对简洁的[yilia](https://github.com/litten/hexo-theme-yilia)，相关的hexo主题有很多，这里附上推荐链接：\n[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n\n1.  域名及域名解析服务：\n我使用的域名是在万网申请的，域名解析服务是[DNSPod](https://www.dnspod.cn)\n关于域名绑定的问题推荐阅读：\n[http://www.jianshu.com/p/1d427e888dda](http://www.jianshu.com/p/1d427e888dda)\n1.  评论系统\nhexo支持多说，大多数个人站用的页比较多,所以直接就用多说了\n\n1.  图床\n直接在目录中放图片也是可以的，不过考虑到加载速度，还是使用图床效果好点，国内用户推荐使用[七牛](http://www.qiniu.com/cdnjiangjia?utm_campaign=cdnjiangjia&utm_source=baidu&utm_medium=advposition&utm_content=png)，可翻墙用户使用`google photos`方便一些。\n\n\n","source":"_posts/2016-09-24.md","raw":"---\ntitle: 如何使用hexo搭建个人站\ntags:\n- Hexo\ncategories: 网站\n---\n\nhexo是基于Node.js的静态网页生成工具，对不具有前端技术经验的童鞋来说，也能很好的搭建个人站\n\n*  第一步：准备\n\n1. 安装`hexo`之前，需要先安装好`Node.js`,安装Node只需要去官网下载相应安装文件安装即可，推荐下载最新的版本；\n2. 安装`Git`(Mac自带了已经)\n3. 备好`github`账号，最好配置好`SSH Keys`（不懂如何配置ssh的童鞋，[这里看](http://www.cnblogs.com/ayseeing/p/3572582.html)）\n\n*  第二步：本地化\n\n1. 安装`Hexo`\n    \n    ```\n    npm install -g hexo\n    ```\n\n2. 初始化`Hexo`，指定一个目录执行命令\n\n    ```\n    hexo init\n    ```\n\n3. 生成静态页面，在初始化的目录执行命令\n\n    ```\n    hexo  generate  或者 hexo g\n    ```\n执行生成静态页面命令之前，最好先执行下面命令，清除缓存，,避免不必要的奇怪问题\n\n    ```\n    hexo clean\n    ```\n生成的静态页面在`hexo/public` 目录中\n\n4. 本地启动，启动本地`service`，进行本地预览和调试\n\n    ```\n    hexo server  或者 hexo s\n    ```\n这步可能会提示各种错误，最常见的错误和解决办法如下\n\n    ```\n    错误：ERROR Plugin load failed: hexo-server\n    解决方法，执行命令: sudo npm install hexo-server\n    \n    错误： Usage: hexo ...\n    解决方法，执行命令： npm install hexo-server --save\n    ```\n    \n*  第三步：发布到远程GitHub\n\n1. 新建远程仓库，注意仓库名称必须为：`your_github_userName.github.io` 固定写法    \n2. 接下来，我们需要修改`_config.yml`来和远程仓库建立关联，在文件下面修改为\n    \n    ```\n    deploy:\n       type: git \n       repo: https://github.com/leopardpan/your_github_userName.github.io.git \n       branch: master\n    ```\n注意：如果你使用了`SSH`，写法稍有不同，应该写成\n\n    ```\n    deploy:\n      type: git\n      repo: git@github.com:your_github_userName/your_github_userName.github.io.git\n      branch: master\n    ```\n\n3. 最后执行如下命令，将本地文件发布到远程`github`仓库\n\n    ```\n    hexo deploy\n    ```\n    浏览器中打开 `http://your_github_userName.github.io/` ,搭建基本完成\n\n*  第四步：其他配置\n\n1.  配置主题\n可以找几个不错的主题来试试，我个人使用的是相对简洁的[yilia](https://github.com/litten/hexo-theme-yilia)，相关的hexo主题有很多，这里附上推荐链接：\n[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n\n1.  域名及域名解析服务：\n我使用的域名是在万网申请的，域名解析服务是[DNSPod](https://www.dnspod.cn)\n关于域名绑定的问题推荐阅读：\n[http://www.jianshu.com/p/1d427e888dda](http://www.jianshu.com/p/1d427e888dda)\n1.  评论系统\nhexo支持多说，大多数个人站用的页比较多,所以直接就用多说了\n\n1.  图床\n直接在目录中放图片也是可以的，不过考虑到加载速度，还是使用图床效果好点，国内用户推荐使用[七牛](http://www.qiniu.com/cdnjiangjia?utm_campaign=cdnjiangjia&utm_source=baidu&utm_medium=advposition&utm_content=png)，可翻墙用户使用`google photos`方便一些。\n\n\n","slug":"2016-09-24","published":1,"date":"2017-01-08T15:15:08.000Z","updated":"2017-01-17T04:56:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbr7000g8gfyym3v290k","content":"<p>hexo是基于Node.js的静态网页生成工具，对不具有前端技术经验的童鞋来说，也能很好的搭建个人站</p>\n<ul>\n<li>第一步：准备</li>\n</ul>\n<ol>\n<li>安装<code>hexo</code>之前，需要先安装好<code>Node.js</code>,安装Node只需要去官网下载相应安装文件安装即可，推荐下载最新的版本；</li>\n<li>安装<code>Git</code>(Mac自带了已经)</li>\n<li>备好<code>github</code>账号，最好配置好<code>SSH Keys</code>（不懂如何配置ssh的童鞋，<a href=\"http://www.cnblogs.com/ayseeing/p/3572582.html\" target=\"_blank\" rel=\"external\">这里看</a>）</li>\n</ol>\n<ul>\n<li>第二步：本地化</li>\n</ul>\n<ol>\n<li><p>安装<code>Hexo</code></p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化<code>Hexo</code>，指定一个目录执行命令</p>\n <figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo init</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成静态页面，在初始化的目录执行命令</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo  <span class=\"keyword\">generate</span>  或者 hexo g</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>执行生成静态页面命令之前，最好先执行下面命令，清除缓存，,避免不必要的奇怪问题</p>\n<pre><code><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo clean</span></div></pre></td></tr></table></figure>\n</code></pre><p>生成的静态页面在<code>hexo/public</code> 目录中</p>\n<ol>\n<li><p>本地启动，启动本地<code>service</code>，进行本地预览和调试</p>\n <figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">server</span>  或者 hexo s</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这步可能会提示各种错误，最常见的错误和解决办法如下</p>\n<pre><code><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">错误：ERROR Plugin <span class=\"keyword\">load</span> <span class=\"keyword\">failed</span>: hexo-<span class=\"keyword\">server</span></div><div class=\"line\">解决方法，执行命令: sudo npm <span class=\"keyword\">install</span> hexo-<span class=\"keyword\">server</span></div><div class=\"line\"></div><div class=\"line\">错误： <span class=\"keyword\">Usage</span>: hexo ...</div><div class=\"line\">解决方法，执行命令： npm <span class=\"keyword\">install</span> hexo-<span class=\"keyword\">server</span> <span class=\"comment\">--save</span></div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第三步：发布到远程GitHub</li>\n</ul>\n<ol>\n<li>新建远程仓库，注意仓库名称必须为：<code>your_github_userName.github.io</code> 固定写法    </li>\n<li><p>接下来，我们需要修改<code>_config.yml</code>来和远程仓库建立关联，在文件下面修改为</p>\n <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">   <span class=\"attribute\">type</span>: git </div><div class=\"line\">   <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/leopardpan/your_github_userName.github.io.git </span></div><div class=\"line\">   <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意：如果你使用了<code>SSH</code>，写法稍有不同，应该写成</p>\n<pre><code><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:your_github_userName/your_github_userName.github.io.git</div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li><p>最后执行如下命令，将本地文件发布到远程<code>github</code>仓库</p>\n <figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo deploy</span></div></pre></td></tr></table></figure>\n<p> 浏览器中打开 <code>http://your_github_userName.github.io/</code> ,搭建基本完成</p>\n</li>\n</ol>\n<ul>\n<li>第四步：其他配置</li>\n</ul>\n<ol>\n<li>配置主题<br>可以找几个不错的主题来试试，我个人使用的是相对简洁的<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">yilia</a>，相关的hexo主题有很多，这里附上推荐链接：<br><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/24422335</a></li>\n</ol>\n<ol>\n<li>域名及域名解析服务：<br>我使用的域名是在万网申请的，域名解析服务是<a href=\"https://www.dnspod.cn\" target=\"_blank\" rel=\"external\">DNSPod</a><br>关于域名绑定的问题推荐阅读：<br><a href=\"http://www.jianshu.com/p/1d427e888dda\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/1d427e888dda</a></li>\n<li><p>评论系统<br>hexo支持多说，大多数个人站用的页比较多,所以直接就用多说了</p>\n</li>\n<li><p>图床<br>直接在目录中放图片也是可以的，不过考虑到加载速度，还是使用图床效果好点，国内用户推荐使用<a href=\"http://www.qiniu.com/cdnjiangjia?utm_campaign=cdnjiangjia&amp;utm_source=baidu&amp;utm_medium=advposition&amp;utm_content=png\" target=\"_blank\" rel=\"external\">七牛</a>，可翻墙用户使用<code>google photos</code>方便一些。</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>hexo是基于Node.js的静态网页生成工具，对不具有前端技术经验的童鞋来说，也能很好的搭建个人站</p>\n<ul>\n<li>第一步：准备</li>\n</ul>\n<ol>\n<li>安装<code>hexo</code>之前，需要先安装好<code>Node.js</code>,安装Node只需要去官网下载相应安装文件安装即可，推荐下载最新的版本；</li>\n<li>安装<code>Git</code>(Mac自带了已经)</li>\n<li>备好<code>github</code>账号，最好配置好<code>SSH Keys</code>（不懂如何配置ssh的童鞋，<a href=\"http://www.cnblogs.com/ayseeing/p/3572582.html\">这里看</a>）</li>\n</ol>\n<ul>\n<li>第二步：本地化</li>\n</ul>\n<ol>\n<li><p>安装<code>Hexo</code></p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化<code>Hexo</code>，指定一个目录执行命令</p>\n <figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo init</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成静态页面，在初始化的目录执行命令</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo  <span class=\"keyword\">generate</span>  或者 hexo g</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>执行生成静态页面命令之前，最好先执行下面命令，清除缓存，,避免不必要的奇怪问题</p>\n<pre><code><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo clean</span></div></pre></td></tr></table></figure>\n</code></pre><p>生成的静态页面在<code>hexo/public</code> 目录中</p>\n<ol>\n<li><p>本地启动，启动本地<code>service</code>，进行本地预览和调试</p>\n <figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">server</span>  或者 hexo s</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这步可能会提示各种错误，最常见的错误和解决办法如下</p>\n<pre><code><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">错误：ERROR Plugin <span class=\"keyword\">load</span> <span class=\"keyword\">failed</span>: hexo-<span class=\"keyword\">server</span></div><div class=\"line\">解决方法，执行命令: sudo npm <span class=\"keyword\">install</span> hexo-<span class=\"keyword\">server</span></div><div class=\"line\"></div><div class=\"line\">错误： <span class=\"keyword\">Usage</span>: hexo ...</div><div class=\"line\">解决方法，执行命令： npm <span class=\"keyword\">install</span> hexo-<span class=\"keyword\">server</span> <span class=\"comment\">--save</span></div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>第三步：发布到远程GitHub</li>\n</ul>\n<ol>\n<li>新建远程仓库，注意仓库名称必须为：<code>your_github_userName.github.io</code> 固定写法    </li>\n<li><p>接下来，我们需要修改<code>_config.yml</code>来和远程仓库建立关联，在文件下面修改为</p>\n <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">   <span class=\"attribute\">type</span>: git </div><div class=\"line\">   <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/leopardpan/your_github_userName.github.io.git </span></div><div class=\"line\">   <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意：如果你使用了<code>SSH</code>，写法稍有不同，应该写成</p>\n<pre><code><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:your_github_userName/your_github_userName.github.io.git</div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li><p>最后执行如下命令，将本地文件发布到远程<code>github</code>仓库</p>\n <figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo deploy</span></div></pre></td></tr></table></figure>\n<p> 浏览器中打开 <code>http://your_github_userName.github.io/</code> ,搭建基本完成</p>\n</li>\n</ol>\n<ul>\n<li>第四步：其他配置</li>\n</ul>\n<ol>\n<li>配置主题<br>可以找几个不错的主题来试试，我个人使用的是相对简洁的<a href=\"https://github.com/litten/hexo-theme-yilia\">yilia</a>，相关的hexo主题有很多，这里附上推荐链接：<br><a href=\"https://www.zhihu.com/question/24422335\">https://www.zhihu.com/question/24422335</a></li>\n</ol>\n<ol>\n<li>域名及域名解析服务：<br>我使用的域名是在万网申请的，域名解析服务是<a href=\"https://www.dnspod.cn\">DNSPod</a><br>关于域名绑定的问题推荐阅读：<br><a href=\"http://www.jianshu.com/p/1d427e888dda\">http://www.jianshu.com/p/1d427e888dda</a></li>\n<li><p>评论系统<br>hexo支持多说，大多数个人站用的页比较多,所以直接就用多说了</p>\n</li>\n<li><p>图床<br>直接在目录中放图片也是可以的，不过考虑到加载速度，还是使用图床效果好点，国内用户推荐使用<a href=\"http://www.qiniu.com/cdnjiangjia?utm_campaign=cdnjiangjia&amp;utm_source=baidu&amp;utm_medium=advposition&amp;utm_content=png\">七牛</a>，可翻墙用户使用<code>google photos</code>方便一些。</p>\n</li>\n</ol>\n"},{"title":"Carthage最佳实践","date":"2017-01-08T13:39:31.000Z","_content":"\nCarthage是去中心化的第三方包管理工具，和cocoapods有明显区别，两者各有优缺点，须视情况使用。Carthage将第三方包及其依赖下载并编译成动态库的形式，仅此而已，有着灵活，低耦合的特点。cocoapods则在使用上简单，但因为中心化的操作方式，需要依靠服务器，服务器出现问题之后没法继续使用更新。\n\n\n\n#### 1.安装Homebrew\nMacos系统普遍使用Homebrew安装Carthage。Homebrew时Macos的软件包管理工具（当然还有其他的，例如皮皮虾），类似于linux系统上的yum，apt-get等，mac上默认不安装Homebrew，需要先自己手动安装。\n\nHomebrew安装很简单，终端输入如下命令就行：\n\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n注：以上命令如果出错，可能需要梯子\n\n\n#### 2.安装Carthag(打开终端，输入如下指令)\n\n1）终端方式：\n\n```\nbrew update\n\nbrew install carthage\n\n```\n2）pkg方式：\n除了使用终端安装，也可以下载最新版[Carthage.pkg]()(https://github.com/Carthage/Carthage/releases)来安装\n\n#### 3.Carthag使用\n1）通过终端进入项目目录\n\n```\n`$ cd /Users/FYTech/Desktop/MyProject \n```\n\n2)创建一个名为“Cartfile”的文件\n\n```\n$ touch Cartfile\n```\n\n3）使用vim 或者xcode打开cartfile文件（使用其他文本编辑器也行）\n\nvim打开\n\n```\n$ vim Cartfile\n```\nxcode打开\n\n```\n$ open -a Xcode Cartfile\n```\n\n4）打开后按以下格式添加第三方库\n\n\n```\ngithub \"Alamofire/Alamofire\" > 3.0\n```\n> 注：\n> 3.0 表示使用版本3.0以上但是低于4.0的最新版本，如3.5, 3.9\n\n> == 3.0 表示使用3.0版本\n\n> = 3.0表示使用3.0或更高的版本\n\n> 没有指明版本号，会自动使用最新的版本\n\n5）保存之后，输入以下命令，开始开始下载并编译第三方库\n\n```\n$ carthage update --platform iOS\n```\n执行完成之后命令之后，项目目录会出现一个“Carthage”文件夹，文件夹下有如下两个子文件夹，“Build”文件夹下包含第三方库对应的.framwork,Checkouts则包含下载的第三方库源文件（如图）\n![][image-1]\n\n使用上述命令时，如果不加`--platform iOS`，默认会同时编译四种平台的.framwork（效果如图）：\n\n![][image-2]\n6）在项目中引入需要的第三方库对应的framework文件(需要做一些配置)\n引入方式和引入一般的framework方式差不多，将Build文件夹下对应的frameworkwork拖到对应区域即可，如图：\n![][image-3]\n此时编译项目，会出现错误提示，还需做做一些配置；\n\n1.点击上图“+”号，选择`New Run Script Phase`，效果如下：\n![][image-4]\n\n2.新版本之后，上图“1”对应的区域已经不需要再进行配置了，只需要对“2”进行编辑就行。完成之后，编译项目，如果出错，可以按照上图添加“1”试试。\n\n至此，使用Carthage的方法已经介绍完成。\n\n总结：使用Carthage管理第三方库，因为直接引用的是.framework文件，项目中需求变化需要修改第三方库时，可以通过以下两种方式：1）添加对应库的Extention  2)项目中直接使用对应库的源码。\n\n参考链接：\n1.[http://www.cnblogs.com/lzrabbit/p/4032515.html][2]\n\n[2]:\thttp://www.cnblogs.com/lzrabbit/p/4032515.html\n\n[image-1]:\thttp://upload-images.jianshu.io/upload_images/852222-c7c78ba77b31d931.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-2]:\thttp://upload-images.jianshu.io/upload_images/852222-68c8c44026f62edd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-3]:\thttp://upload-images.jianshu.io/upload_images/852222-f5936e20995c2e30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-4]:\thttp://upload-images.jianshu.io/upload_images/852222-0986daf8a79d1a28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n","source":"_posts/2016-12-26.md","raw":"---\ntitle: 'Carthage最佳实践'\ndate: 2017-01-08 21:39:31\ntags: Swift\ncategories: iOS\n---\n\nCarthage是去中心化的第三方包管理工具，和cocoapods有明显区别，两者各有优缺点，须视情况使用。Carthage将第三方包及其依赖下载并编译成动态库的形式，仅此而已，有着灵活，低耦合的特点。cocoapods则在使用上简单，但因为中心化的操作方式，需要依靠服务器，服务器出现问题之后没法继续使用更新。\n\n\n\n#### 1.安装Homebrew\nMacos系统普遍使用Homebrew安装Carthage。Homebrew时Macos的软件包管理工具（当然还有其他的，例如皮皮虾），类似于linux系统上的yum，apt-get等，mac上默认不安装Homebrew，需要先自己手动安装。\n\nHomebrew安装很简单，终端输入如下命令就行：\n\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n注：以上命令如果出错，可能需要梯子\n\n\n#### 2.安装Carthag(打开终端，输入如下指令)\n\n1）终端方式：\n\n```\nbrew update\n\nbrew install carthage\n\n```\n2）pkg方式：\n除了使用终端安装，也可以下载最新版[Carthage.pkg]()(https://github.com/Carthage/Carthage/releases)来安装\n\n#### 3.Carthag使用\n1）通过终端进入项目目录\n\n```\n`$ cd /Users/FYTech/Desktop/MyProject \n```\n\n2)创建一个名为“Cartfile”的文件\n\n```\n$ touch Cartfile\n```\n\n3）使用vim 或者xcode打开cartfile文件（使用其他文本编辑器也行）\n\nvim打开\n\n```\n$ vim Cartfile\n```\nxcode打开\n\n```\n$ open -a Xcode Cartfile\n```\n\n4）打开后按以下格式添加第三方库\n\n\n```\ngithub \"Alamofire/Alamofire\" > 3.0\n```\n> 注：\n> 3.0 表示使用版本3.0以上但是低于4.0的最新版本，如3.5, 3.9\n\n> == 3.0 表示使用3.0版本\n\n> = 3.0表示使用3.0或更高的版本\n\n> 没有指明版本号，会自动使用最新的版本\n\n5）保存之后，输入以下命令，开始开始下载并编译第三方库\n\n```\n$ carthage update --platform iOS\n```\n执行完成之后命令之后，项目目录会出现一个“Carthage”文件夹，文件夹下有如下两个子文件夹，“Build”文件夹下包含第三方库对应的.framwork,Checkouts则包含下载的第三方库源文件（如图）\n![][image-1]\n\n使用上述命令时，如果不加`--platform iOS`，默认会同时编译四种平台的.framwork（效果如图）：\n\n![][image-2]\n6）在项目中引入需要的第三方库对应的framework文件(需要做一些配置)\n引入方式和引入一般的framework方式差不多，将Build文件夹下对应的frameworkwork拖到对应区域即可，如图：\n![][image-3]\n此时编译项目，会出现错误提示，还需做做一些配置；\n\n1.点击上图“+”号，选择`New Run Script Phase`，效果如下：\n![][image-4]\n\n2.新版本之后，上图“1”对应的区域已经不需要再进行配置了，只需要对“2”进行编辑就行。完成之后，编译项目，如果出错，可以按照上图添加“1”试试。\n\n至此，使用Carthage的方法已经介绍完成。\n\n总结：使用Carthage管理第三方库，因为直接引用的是.framework文件，项目中需求变化需要修改第三方库时，可以通过以下两种方式：1）添加对应库的Extention  2)项目中直接使用对应库的源码。\n\n参考链接：\n1.[http://www.cnblogs.com/lzrabbit/p/4032515.html][2]\n\n[2]:\thttp://www.cnblogs.com/lzrabbit/p/4032515.html\n\n[image-1]:\thttp://upload-images.jianshu.io/upload_images/852222-c7c78ba77b31d931.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-2]:\thttp://upload-images.jianshu.io/upload_images/852222-68c8c44026f62edd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-3]:\thttp://upload-images.jianshu.io/upload_images/852222-f5936e20995c2e30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-4]:\thttp://upload-images.jianshu.io/upload_images/852222-0986daf8a79d1a28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n","slug":"2016-12-26","published":1,"updated":"2017-01-08T15:41:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbrh000k8gfyitv8w678","content":"<p>Carthage是去中心化的第三方包管理工具，和cocoapods有明显区别，两者各有优缺点，须视情况使用。Carthage将第三方包及其依赖下载并编译成动态库的形式，仅此而已，有着灵活，低耦合的特点。cocoapods则在使用上简单，但因为中心化的操作方式，需要依靠服务器，服务器出现问题之后没法继续使用更新。</p>\n<h4 id=\"1-安装Homebrew\"><a href=\"#1-安装Homebrew\" class=\"headerlink\" title=\"1.安装Homebrew\"></a>1.安装Homebrew</h4><p>Macos系统普遍使用Homebrew安装Carthage。Homebrew时Macos的软件包管理工具（当然还有其他的，例如皮皮虾），类似于linux系统上的yum，apt-get等，mac上默认不安装Homebrew，需要先自己手动安装。</p>\n<p>Homebrew安装很简单，终端输入如下命令就行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre></td></tr></table></figure>\n<p>注：以上命令如果出错，可能需要梯子</p>\n<h4 id=\"2-安装Carthag-打开终端，输入如下指令\"><a href=\"#2-安装Carthag-打开终端，输入如下指令\" class=\"headerlink\" title=\"2.安装Carthag(打开终端，输入如下指令)\"></a>2.安装Carthag(打开终端，输入如下指令)</h4><p>1）终端方式：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span>update</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>carthage</div></pre></td></tr></table></figure>\n<p>2）pkg方式：<br>除了使用终端安装，也可以下载最新版<a href=\"\">Carthage.pkg</a>(<a href=\"https://github.com/Carthage/Carthage/releases)来安装\" target=\"_blank\" rel=\"external\">https://github.com/Carthage/Carthage/releases)来安装</a></p>\n<h4 id=\"3-Carthag使用\"><a href=\"#3-Carthag使用\" class=\"headerlink\" title=\"3.Carthag使用\"></a>3.Carthag使用</h4><p>1）通过终端进入项目目录</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`$ cd <span class=\"regexp\">/Users/</span>FYTech<span class=\"regexp\">/Desktop/</span>MyProject</div></pre></td></tr></table></figure>\n<p>2)创建一个名为“Cartfile”的文件</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>touch Cartfile</div></pre></td></tr></table></figure>\n<p>3）使用vim 或者xcode打开cartfile文件（使用其他文本编辑器也行）</p>\n<p>vim打开</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>vim Cartfile</div></pre></td></tr></table></figure>\n<p>xcode打开</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">open</span> -<span class=\"keyword\">a</span> Xcode Cartfile</div></pre></td></tr></table></figure>\n<p>4）打开后按以下格式添加第三方库</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">github <span class=\"string\">\"Alamofire/Alamofire\"</span> &gt; <span class=\"number\">3.0</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：<br>3.0 表示使用版本3.0以上但是低于4.0的最新版本，如3.5, 3.9</p>\n<p>== 3.0 表示使用3.0版本</p>\n<p>= 3.0表示使用3.0或更高的版本</p>\n<p>没有指明版本号，会自动使用最新的版本</p>\n</blockquote>\n<p>5）保存之后，输入以下命令，开始开始下载并编译第三方库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ carthage <span class=\"keyword\">update</span> <span class=\"comment\">--platform iOS</span></div></pre></td></tr></table></figure>\n<p>执行完成之后命令之后，项目目录会出现一个“Carthage”文件夹，文件夹下有如下两个子文件夹，“Build”文件夹下包含第三方库对应的.framwork,Checkouts则包含下载的第三方库源文件（如图）<br><img src=\"http://upload-images.jianshu.io/upload_images/852222-c7c78ba77b31d931.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>使用上述命令时，如果不加<code>--platform iOS</code>，默认会同时编译四种平台的.framwork（效果如图）：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-68c8c44026f62edd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>6）在项目中引入需要的第三方库对应的framework文件(需要做一些配置)<br>引入方式和引入一般的framework方式差不多，将Build文件夹下对应的frameworkwork拖到对应区域即可，如图：<br><img src=\"http://upload-images.jianshu.io/upload_images/852222-f5936e20995c2e30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>此时编译项目，会出现错误提示，还需做做一些配置；</p>\n<p>1.点击上图“+”号，选择<code>New Run Script Phase</code>，效果如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/852222-0986daf8a79d1a28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>2.新版本之后，上图“1”对应的区域已经不需要再进行配置了，只需要对“2”进行编辑就行。完成之后，编译项目，如果出错，可以按照上图添加“1”试试。</p>\n<p>至此，使用Carthage的方法已经介绍完成。</p>\n<p>总结：使用Carthage管理第三方库，因为直接引用的是.framework文件，项目中需求变化需要修改第三方库时，可以通过以下两种方式：1）添加对应库的Extention  2)项目中直接使用对应库的源码。</p>\n<p>参考链接：<br>1.<a href=\"http://www.cnblogs.com/lzrabbit/p/4032515.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/lzrabbit/p/4032515.html</a></p>\n","excerpt":"","more":"<p>Carthage是去中心化的第三方包管理工具，和cocoapods有明显区别，两者各有优缺点，须视情况使用。Carthage将第三方包及其依赖下载并编译成动态库的形式，仅此而已，有着灵活，低耦合的特点。cocoapods则在使用上简单，但因为中心化的操作方式，需要依靠服务器，服务器出现问题之后没法继续使用更新。</p>\n<h4 id=\"1-安装Homebrew\"><a href=\"#1-安装Homebrew\" class=\"headerlink\" title=\"1.安装Homebrew\"></a>1.安装Homebrew</h4><p>Macos系统普遍使用Homebrew安装Carthage。Homebrew时Macos的软件包管理工具（当然还有其他的，例如皮皮虾），类似于linux系统上的yum，apt-get等，mac上默认不安装Homebrew，需要先自己手动安装。</p>\n<p>Homebrew安装很简单，终端输入如下命令就行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre></td></tr></table></figure>\n<p>注：以上命令如果出错，可能需要梯子</p>\n<h4 id=\"2-安装Carthag-打开终端，输入如下指令\"><a href=\"#2-安装Carthag-打开终端，输入如下指令\" class=\"headerlink\" title=\"2.安装Carthag(打开终端，输入如下指令)\"></a>2.安装Carthag(打开终端，输入如下指令)</h4><p>1）终端方式：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span>update</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>carthage</div></pre></td></tr></table></figure>\n<p>2）pkg方式：<br>除了使用终端安装，也可以下载最新版<a href=\"\">Carthage.pkg</a>(<a href=\"https://github.com/Carthage/Carthage/releases)来安装\">https://github.com/Carthage/Carthage/releases)来安装</a></p>\n<h4 id=\"3-Carthag使用\"><a href=\"#3-Carthag使用\" class=\"headerlink\" title=\"3.Carthag使用\"></a>3.Carthag使用</h4><p>1）通过终端进入项目目录</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`$ cd <span class=\"regexp\">/Users/</span>FYTech<span class=\"regexp\">/Desktop/</span>MyProject</div></pre></td></tr></table></figure>\n<p>2)创建一个名为“Cartfile”的文件</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>touch Cartfile</div></pre></td></tr></table></figure>\n<p>3）使用vim 或者xcode打开cartfile文件（使用其他文本编辑器也行）</p>\n<p>vim打开</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>vim Cartfile</div></pre></td></tr></table></figure>\n<p>xcode打开</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">open</span> -<span class=\"keyword\">a</span> Xcode Cartfile</div></pre></td></tr></table></figure>\n<p>4）打开后按以下格式添加第三方库</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">github <span class=\"string\">\"Alamofire/Alamofire\"</span> &gt; <span class=\"number\">3.0</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：<br>3.0 表示使用版本3.0以上但是低于4.0的最新版本，如3.5, 3.9</p>\n<p>== 3.0 表示使用3.0版本</p>\n<p>= 3.0表示使用3.0或更高的版本</p>\n<p>没有指明版本号，会自动使用最新的版本</p>\n</blockquote>\n<p>5）保存之后，输入以下命令，开始开始下载并编译第三方库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ carthage <span class=\"keyword\">update</span> <span class=\"comment\">--platform iOS</span></div></pre></td></tr></table></figure>\n<p>执行完成之后命令之后，项目目录会出现一个“Carthage”文件夹，文件夹下有如下两个子文件夹，“Build”文件夹下包含第三方库对应的.framwork,Checkouts则包含下载的第三方库源文件（如图）<br><img src=\"http://upload-images.jianshu.io/upload_images/852222-c7c78ba77b31d931.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>使用上述命令时，如果不加<code>--platform iOS</code>，默认会同时编译四种平台的.framwork（效果如图）：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-68c8c44026f62edd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>6）在项目中引入需要的第三方库对应的framework文件(需要做一些配置)<br>引入方式和引入一般的framework方式差不多，将Build文件夹下对应的frameworkwork拖到对应区域即可，如图：<br><img src=\"http://upload-images.jianshu.io/upload_images/852222-f5936e20995c2e30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>此时编译项目，会出现错误提示，还需做做一些配置；</p>\n<p>1.点击上图“+”号，选择<code>New Run Script Phase</code>，效果如下：<br><img src=\"http://upload-images.jianshu.io/upload_images/852222-0986daf8a79d1a28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>2.新版本之后，上图“1”对应的区域已经不需要再进行配置了，只需要对“2”进行编辑就行。完成之后，编译项目，如果出错，可以按照上图添加“1”试试。</p>\n<p>至此，使用Carthage的方法已经介绍完成。</p>\n<p>总结：使用Carthage管理第三方库，因为直接引用的是.framework文件，项目中需求变化需要修改第三方库时，可以通过以下两种方式：1）添加对应库的Extention  2)项目中直接使用对应库的源码。</p>\n<p>参考链接：<br>1.<a href=\"http://www.cnblogs.com/lzrabbit/p/4032515.html\">http://www.cnblogs.com/lzrabbit/p/4032515.html</a></p>\n"},{"title":"浅谈IBInspectable & IBDesignable","date":"2017-01-08T13:45:35.000Z","_content":"IBInspectable 和 IBDesignable 出现之前，实现圆角这样的效果，可以通过硬编码或者xib／storyBord实例中设置键值编码属性来实现；这两种方式除了需要实时运行程序来查看效果外，通过xib或者storybord来设置键值编码，虽然功能强大，但是一个属性的关键字路径，类型和属性值需要在每个实例中设置，且没有任何自动完成或输入提示，很多时候不得不查看文档或者源代码。用 IBInspectable 和 IBDesignable 可以将自定义属性或者页面暴露在属性检查器面板上，手动设置，方便直观。\n\n### IBInspectable\n\n一，对于Cocoa 内置类型，可以通过扩展将属性暴露在 Interface Builder 属性检查器中，使属性可视。\n\n\n```\nextension UIView{\n\n@IBInspectable var customBackColor : UIColor{\nget{\nreturn backgroundColor!;\n}\nset{\nbackgroundColor = newValue;\n}\n}\n\n}\n\n```\n@IBInspectable 关键字告诉编译器，后面的属性需要在属性检查器中显示，效果如图：\n\n![][image-1]\n\n同时，在运行时属性栏会自动填充相应的键值属性\n\n\n![][image-2]\n\n\n二，对于自定义View，除了用上述方式之外，更多的直接使用@IBInspectable使自身属性可视化。\n\n```\nclass MYView: UIView {\n\n@IBInspectable var myCornerRadius: CGFloat = 0.0{\n\ndidSet{\nlayer.cornerRadius = myCornerRadius //圆角\n}\n}\n@IBInspectable var masks : Bool = true{\n\ndidSet{\nlayer.masksToBounds = masks //mask裁剪\n}\n}\n@IBInspectable var myColor : UIColor = UIColor.red{\ndidSet{\nbackgroundColor = myColor //背景色\n}\n}\n}\n\n```\n\n代码在 Interface Builder 属性检查器中的效果\n\n![][image-3]\n\n这样通过IBInspectable就可以很方便的在属性检查器中手动设置参数值了。\n\n\n### IBDesignable\n接着说自定义的View，虽然通过@IBInspectable将参数可视化在Interface Builder 属性检查器中；但是设置属性值之后，想要查看效果的话，还是需要每次都运行程序调试。使用IBDesignable却能在xib或storyBord中实时渲染出设置属性的效果。\n\n只需要在上述代码中添加@IBDesignable标签即可\n\n```\n@IBDesignabl\n\nclass MYView: UIView {\n\n@IBInspectable var myCornerRadius: CGFloat = 0.0{\n\ndidSet{\nlayer.cornerRadius = myCornerRadius\n}\n}\n@IBInspectable var masks : Bool = true{\n\ndidSet{\nlayer.masksToBounds = masks\n}\n}\n@IBInspectable var myColor : UIColor = UIColor.red{\ndidSet{\nbackgroundColor = myColor\n}\n}\n}\n\n```\n\n这样每次通过属性检查器设置属性之后，可以立即查看到自定义View的效果：\n\n![][image-4]\n\n\nnow，你可以以一种新的方式在组织你的代码了。\n\n\n不足之处，欢迎指正！\n\n[image-1]:\thttp://upload-images.jianshu.io/upload_images/852222-7935ca5ef7279bb3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-2]:\thttp://upload-images.jianshu.io/upload_images/852222-9292e9adca69e712.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-3]:\thttp://upload-images.jianshu.io/upload_images/852222-709d776295c0f0e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-4]:\thttp://upload-images.jianshu.io/upload_images/852222-7542a1fd1650c7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","source":"_posts/2017-01-03.md","raw":"---\ntitle: 浅谈IBInspectable & IBDesignable\ndate: 2017-01-08 21:45:35\ntags: Swift\ncategories: iOS\n---\nIBInspectable 和 IBDesignable 出现之前，实现圆角这样的效果，可以通过硬编码或者xib／storyBord实例中设置键值编码属性来实现；这两种方式除了需要实时运行程序来查看效果外，通过xib或者storybord来设置键值编码，虽然功能强大，但是一个属性的关键字路径，类型和属性值需要在每个实例中设置，且没有任何自动完成或输入提示，很多时候不得不查看文档或者源代码。用 IBInspectable 和 IBDesignable 可以将自定义属性或者页面暴露在属性检查器面板上，手动设置，方便直观。\n\n### IBInspectable\n\n一，对于Cocoa 内置类型，可以通过扩展将属性暴露在 Interface Builder 属性检查器中，使属性可视。\n\n\n```\nextension UIView{\n\n@IBInspectable var customBackColor : UIColor{\nget{\nreturn backgroundColor!;\n}\nset{\nbackgroundColor = newValue;\n}\n}\n\n}\n\n```\n@IBInspectable 关键字告诉编译器，后面的属性需要在属性检查器中显示，效果如图：\n\n![][image-1]\n\n同时，在运行时属性栏会自动填充相应的键值属性\n\n\n![][image-2]\n\n\n二，对于自定义View，除了用上述方式之外，更多的直接使用@IBInspectable使自身属性可视化。\n\n```\nclass MYView: UIView {\n\n@IBInspectable var myCornerRadius: CGFloat = 0.0{\n\ndidSet{\nlayer.cornerRadius = myCornerRadius //圆角\n}\n}\n@IBInspectable var masks : Bool = true{\n\ndidSet{\nlayer.masksToBounds = masks //mask裁剪\n}\n}\n@IBInspectable var myColor : UIColor = UIColor.red{\ndidSet{\nbackgroundColor = myColor //背景色\n}\n}\n}\n\n```\n\n代码在 Interface Builder 属性检查器中的效果\n\n![][image-3]\n\n这样通过IBInspectable就可以很方便的在属性检查器中手动设置参数值了。\n\n\n### IBDesignable\n接着说自定义的View，虽然通过@IBInspectable将参数可视化在Interface Builder 属性检查器中；但是设置属性值之后，想要查看效果的话，还是需要每次都运行程序调试。使用IBDesignable却能在xib或storyBord中实时渲染出设置属性的效果。\n\n只需要在上述代码中添加@IBDesignable标签即可\n\n```\n@IBDesignabl\n\nclass MYView: UIView {\n\n@IBInspectable var myCornerRadius: CGFloat = 0.0{\n\ndidSet{\nlayer.cornerRadius = myCornerRadius\n}\n}\n@IBInspectable var masks : Bool = true{\n\ndidSet{\nlayer.masksToBounds = masks\n}\n}\n@IBInspectable var myColor : UIColor = UIColor.red{\ndidSet{\nbackgroundColor = myColor\n}\n}\n}\n\n```\n\n这样每次通过属性检查器设置属性之后，可以立即查看到自定义View的效果：\n\n![][image-4]\n\n\nnow，你可以以一种新的方式在组织你的代码了。\n\n\n不足之处，欢迎指正！\n\n[image-1]:\thttp://upload-images.jianshu.io/upload_images/852222-7935ca5ef7279bb3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-2]:\thttp://upload-images.jianshu.io/upload_images/852222-9292e9adca69e712.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-3]:\thttp://upload-images.jianshu.io/upload_images/852222-709d776295c0f0e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[image-4]:\thttp://upload-images.jianshu.io/upload_images/852222-7542a1fd1650c7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","slug":"2017-01-03","published":1,"updated":"2017-01-08T15:48:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbrk000n8gfyzr7w83yx","content":"<p>IBInspectable 和 IBDesignable 出现之前，实现圆角这样的效果，可以通过硬编码或者xib／storyBord实例中设置键值编码属性来实现；这两种方式除了需要实时运行程序来查看效果外，通过xib或者storybord来设置键值编码，虽然功能强大，但是一个属性的关键字路径，类型和属性值需要在每个实例中设置，且没有任何自动完成或输入提示，很多时候不得不查看文档或者源代码。用 IBInspectable 和 IBDesignable 可以将自定义属性或者页面暴露在属性检查器面板上，手动设置，方便直观。</p>\n<h3 id=\"IBInspectable\"><a href=\"#IBInspectable\" class=\"headerlink\" title=\"IBInspectable\"></a>IBInspectable</h3><p>一，对于Cocoa 内置类型，可以通过扩展将属性暴露在 Interface Builder 属性检查器中，使属性可视。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIView</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> customBackColor : <span class=\"type\">UIColor</span>&#123;</div><div class=\"line\"><span class=\"keyword\">get</span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> backgroundColor!;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">set</span>&#123;</div><div class=\"line\">backgroundColor = newValue;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@IBInspectable 关键字告诉编译器，后面的属性需要在属性检查器中显示，效果如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-7935ca5ef7279bb3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>同时，在运行时属性栏会自动填充相应的键值属性</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-9292e9adca69e712.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>二，对于自定义View，除了用上述方式之外，更多的直接使用@IBInspectable使自身属性可视化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MYView</span>: <span class=\"title\">UIView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> myCornerRadius: <span class=\"type\">CGFloat</span> = <span class=\"number\">0.0</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">layer.cornerRadius = myCornerRadius <span class=\"comment\">//圆角</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> masks : <span class=\"type\">Bool</span> = <span class=\"literal\">true</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">layer.masksToBounds = masks <span class=\"comment\">//mask裁剪</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> myColor : <span class=\"type\">UIColor</span> = <span class=\"type\">UIColor</span>.red&#123;</div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">backgroundColor = myColor <span class=\"comment\">//背景色</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码在 Interface Builder 属性检查器中的效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-709d776295c0f0e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这样通过IBInspectable就可以很方便的在属性检查器中手动设置参数值了。</p>\n<h3 id=\"IBDesignable\"><a href=\"#IBDesignable\" class=\"headerlink\" title=\"IBDesignable\"></a>IBDesignable</h3><p>接着说自定义的View，虽然通过@IBInspectable将参数可视化在Interface Builder 属性检查器中；但是设置属性值之后，想要查看效果的话，还是需要每次都运行程序调试。使用IBDesignable却能在xib或storyBord中实时渲染出设置属性的效果。</p>\n<p>只需要在上述代码中添加@IBDesignable标签即可</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"type\">IBDesignabl</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MYView</span>: <span class=\"title\">UIView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> myCornerRadius: <span class=\"type\">CGFloat</span> = <span class=\"number\">0.0</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">layer.cornerRadius = myCornerRadius</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> masks : <span class=\"type\">Bool</span> = <span class=\"literal\">true</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">layer.masksToBounds = masks</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> myColor : <span class=\"type\">UIColor</span> = <span class=\"type\">UIColor</span>.red&#123;</div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">backgroundColor = myColor</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样每次通过属性检查器设置属性之后，可以立即查看到自定义View的效果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-7542a1fd1650c7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>now，你可以以一种新的方式在组织你的代码了。</p>\n<p>不足之处，欢迎指正！</p>\n","excerpt":"","more":"<p>IBInspectable 和 IBDesignable 出现之前，实现圆角这样的效果，可以通过硬编码或者xib／storyBord实例中设置键值编码属性来实现；这两种方式除了需要实时运行程序来查看效果外，通过xib或者storybord来设置键值编码，虽然功能强大，但是一个属性的关键字路径，类型和属性值需要在每个实例中设置，且没有任何自动完成或输入提示，很多时候不得不查看文档或者源代码。用 IBInspectable 和 IBDesignable 可以将自定义属性或者页面暴露在属性检查器面板上，手动设置，方便直观。</p>\n<h3 id=\"IBInspectable\"><a href=\"#IBInspectable\" class=\"headerlink\" title=\"IBInspectable\"></a>IBInspectable</h3><p>一，对于Cocoa 内置类型，可以通过扩展将属性暴露在 Interface Builder 属性检查器中，使属性可视。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIView</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> customBackColor : <span class=\"type\">UIColor</span>&#123;</div><div class=\"line\"><span class=\"keyword\">get</span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> backgroundColor!;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">set</span>&#123;</div><div class=\"line\">backgroundColor = newValue;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@IBInspectable 关键字告诉编译器，后面的属性需要在属性检查器中显示，效果如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-7935ca5ef7279bb3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>同时，在运行时属性栏会自动填充相应的键值属性</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-9292e9adca69e712.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>二，对于自定义View，除了用上述方式之外，更多的直接使用@IBInspectable使自身属性可视化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MYView</span>: <span class=\"title\">UIView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> myCornerRadius: <span class=\"type\">CGFloat</span> = <span class=\"number\">0.0</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">layer.cornerRadius = myCornerRadius <span class=\"comment\">//圆角</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> masks : <span class=\"type\">Bool</span> = <span class=\"literal\">true</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">layer.masksToBounds = masks <span class=\"comment\">//mask裁剪</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> myColor : <span class=\"type\">UIColor</span> = <span class=\"type\">UIColor</span>.red&#123;</div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">backgroundColor = myColor <span class=\"comment\">//背景色</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码在 Interface Builder 属性检查器中的效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-709d776295c0f0e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这样通过IBInspectable就可以很方便的在属性检查器中手动设置参数值了。</p>\n<h3 id=\"IBDesignable\"><a href=\"#IBDesignable\" class=\"headerlink\" title=\"IBDesignable\"></a>IBDesignable</h3><p>接着说自定义的View，虽然通过@IBInspectable将参数可视化在Interface Builder 属性检查器中；但是设置属性值之后，想要查看效果的话，还是需要每次都运行程序调试。使用IBDesignable却能在xib或storyBord中实时渲染出设置属性的效果。</p>\n<p>只需要在上述代码中添加@IBDesignable标签即可</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"type\">IBDesignabl</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MYView</span>: <span class=\"title\">UIView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> myCornerRadius: <span class=\"type\">CGFloat</span> = <span class=\"number\">0.0</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">layer.cornerRadius = myCornerRadius</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> masks : <span class=\"type\">Bool</span> = <span class=\"literal\">true</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">layer.masksToBounds = masks</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">var</span> myColor : <span class=\"type\">UIColor</span> = <span class=\"type\">UIColor</span>.red&#123;</div><div class=\"line\"><span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">backgroundColor = myColor</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样每次通过属性检查器设置属性之后，可以立即查看到自定义View的效果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/852222-7542a1fd1650c7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>now，你可以以一种新的方式在组织你的代码了。</p>\n<p>不足之处，欢迎指正！</p>\n"},{"title":"动画时间","_content":"\n*  全局时间和本地时间S\n\nCoreAnimation有一个全局时间的概念，也就是所谓的**马赫时间**（“马赫”实际上是iOS和Mac OS系统内核的命名）。马赫时间在设备上所有进程都是全局的--但是在不同设备上并不是全局的--不过这已经足够对动画的参考点提供便利了，你可以使用CACurrentMediaTime函数来访问马赫时间：\n\n\n```\nCFTimeInterval time = CACurrentMediaTime();\n```\n\n\n这个函数返回的值其实无关紧要（它返回了设备自从上次启动后的秒数，并不是你所关心的），它真实的作用在于对动画的时间测量提供了一个相对值。注意当设备休眠的时候马赫时间会暂停，也就是所有的CAAnimations（基于马赫时间）同样也会暂停。\n\n每个CALayer和CAAnimation实例都有自己本地时间的概念，是根据父图层/动画层级关系中的beginTime，timeOffset和speed属性计算。就和转换不同图层之间坐标关系一样，CALayer同样也提供了方法来转换不同图层之间的本地时间。如下：\n\n\n```\n- (CFTimeInterval)convertTime:(CFTimeInterval)t fromLayer:(CALayer *)l; \n- (CFTimeInterval)convertTime:(CFTimeInterval)t toLayer:(CALayer *)l;\n```\n当用来同步不同图层之间有不同的speed，timeOffset和beginTime的动画，这些方法会很有用。\n\n*  暂停，倒回和快进\n\n设置动画的speed属性为0可以暂停动画，但在动画被添加到图层之后不太可能再修改它了，所以不能对正在进行的动画使用这个属性。给图层添加一个`CAAnimation`实际上是给动画对象做了一个不可改变的拷贝，所以对原始动画对象属性的改变对真实的动画并没有作用。相反，直接用`-animationForKey:`来检索图层正在进行的动画可以返回正确的动画对象，但是修改它的属性将会抛出异常。\n如果移除图层正在进行的动画，图层将会急速返回动画之前的状态。但如果在动画移除之前拷贝呈现图层到模型图层，动画将会看起来暂停在那里。但是不好的地方在于之后就不能再恢复动画了。\n一个简单的方法是可以利用`CAMediaTiming`来暂停图层本身。如果把图层的speed设置成0，它会暂停任何添加到图层上的动画。类似的，设置`speed`大于1.0将会快进，设置成一个负值将会倒回动画。\n通过增加主窗口图层的speed，可以暂停整个应用程序的动画。这对UI自动化提供了好处，我们可以加速所有的视图动画来进行自动化测试（注意对于在主窗口之外的视图并不会被影响，比如UIAlertview）。可以在app delegate设置如下进行验证：\n\n\n```\nself.window.layer.speed = 100;\n```\n\n你也可以通过这种方式来减速，但其实也可以在模拟器通过切换慢速动画来实现。\n\n\n","source":"_posts/2016-09-23.md","raw":"---\ntitle: 动画时间\ntags:\n- 动画\ncategories: iOS\n---\n\n*  全局时间和本地时间S\n\nCoreAnimation有一个全局时间的概念，也就是所谓的**马赫时间**（“马赫”实际上是iOS和Mac OS系统内核的命名）。马赫时间在设备上所有进程都是全局的--但是在不同设备上并不是全局的--不过这已经足够对动画的参考点提供便利了，你可以使用CACurrentMediaTime函数来访问马赫时间：\n\n\n```\nCFTimeInterval time = CACurrentMediaTime();\n```\n\n\n这个函数返回的值其实无关紧要（它返回了设备自从上次启动后的秒数，并不是你所关心的），它真实的作用在于对动画的时间测量提供了一个相对值。注意当设备休眠的时候马赫时间会暂停，也就是所有的CAAnimations（基于马赫时间）同样也会暂停。\n\n每个CALayer和CAAnimation实例都有自己本地时间的概念，是根据父图层/动画层级关系中的beginTime，timeOffset和speed属性计算。就和转换不同图层之间坐标关系一样，CALayer同样也提供了方法来转换不同图层之间的本地时间。如下：\n\n\n```\n- (CFTimeInterval)convertTime:(CFTimeInterval)t fromLayer:(CALayer *)l; \n- (CFTimeInterval)convertTime:(CFTimeInterval)t toLayer:(CALayer *)l;\n```\n当用来同步不同图层之间有不同的speed，timeOffset和beginTime的动画，这些方法会很有用。\n\n*  暂停，倒回和快进\n\n设置动画的speed属性为0可以暂停动画，但在动画被添加到图层之后不太可能再修改它了，所以不能对正在进行的动画使用这个属性。给图层添加一个`CAAnimation`实际上是给动画对象做了一个不可改变的拷贝，所以对原始动画对象属性的改变对真实的动画并没有作用。相反，直接用`-animationForKey:`来检索图层正在进行的动画可以返回正确的动画对象，但是修改它的属性将会抛出异常。\n如果移除图层正在进行的动画，图层将会急速返回动画之前的状态。但如果在动画移除之前拷贝呈现图层到模型图层，动画将会看起来暂停在那里。但是不好的地方在于之后就不能再恢复动画了。\n一个简单的方法是可以利用`CAMediaTiming`来暂停图层本身。如果把图层的speed设置成0，它会暂停任何添加到图层上的动画。类似的，设置`speed`大于1.0将会快进，设置成一个负值将会倒回动画。\n通过增加主窗口图层的speed，可以暂停整个应用程序的动画。这对UI自动化提供了好处，我们可以加速所有的视图动画来进行自动化测试（注意对于在主窗口之外的视图并不会被影响，比如UIAlertview）。可以在app delegate设置如下进行验证：\n\n\n```\nself.window.layer.speed = 100;\n```\n\n你也可以通过这种方式来减速，但其实也可以在模拟器通过切换慢速动画来实现。\n\n\n","slug":"2016-09-23","published":1,"date":"2017-01-08T15:14:07.000Z","updated":"2017-01-17T04:55:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1bmbro000r8gfycreoaf6g","content":"<ul>\n<li>全局时间和本地时间S</li>\n</ul>\n<p>CoreAnimation有一个全局时间的概念，也就是所谓的<strong>马赫时间</strong>（“马赫”实际上是iOS和Mac OS系统内核的命名）。马赫时间在设备上所有进程都是全局的–但是在不同设备上并不是全局的–不过这已经足够对动画的参考点提供便利了，你可以使用CACurrentMediaTime函数来访问马赫时间：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">CFTimeInterval time</span> = CACurrentMediaTime();</div></pre></td></tr></table></figure>\n<p>这个函数返回的值其实无关紧要（它返回了设备自从上次启动后的秒数，并不是你所关心的），它真实的作用在于对动画的时间测量提供了一个相对值。注意当设备休眠的时候马赫时间会暂停，也就是所有的CAAnimations（基于马赫时间）同样也会暂停。</p>\n<p>每个CALayer和CAAnimation实例都有自己本地时间的概念，是根据父图层/动画层级关系中的beginTime，timeOffset和speed属性计算。就和转换不同图层之间坐标关系一样，CALayer同样也提供了方法来转换不同图层之间的本地时间。如下：</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- <span class=\"params\">(CFTimeInterval)</span>convertTime:<span class=\"params\">(CFTimeInterval)</span>t fromLayer:<span class=\"params\">(CALayer *)</span>l; </div><div class=\"line\">- <span class=\"params\">(CFTimeInterval)</span>convertTime:<span class=\"params\">(CFTimeInterval)</span>t toLayer:<span class=\"params\">(CALayer *)</span>l;</div></pre></td></tr></table></figure>\n<p>当用来同步不同图层之间有不同的speed，timeOffset和beginTime的动画，这些方法会很有用。</p>\n<ul>\n<li>暂停，倒回和快进</li>\n</ul>\n<p>设置动画的speed属性为0可以暂停动画，但在动画被添加到图层之后不太可能再修改它了，所以不能对正在进行的动画使用这个属性。给图层添加一个<code>CAAnimation</code>实际上是给动画对象做了一个不可改变的拷贝，所以对原始动画对象属性的改变对真实的动画并没有作用。相反，直接用<code>-animationForKey:</code>来检索图层正在进行的动画可以返回正确的动画对象，但是修改它的属性将会抛出异常。<br>如果移除图层正在进行的动画，图层将会急速返回动画之前的状态。但如果在动画移除之前拷贝呈现图层到模型图层，动画将会看起来暂停在那里。但是不好的地方在于之后就不能再恢复动画了。<br>一个简单的方法是可以利用<code>CAMediaTiming</code>来暂停图层本身。如果把图层的speed设置成0，它会暂停任何添加到图层上的动画。类似的，设置<code>speed</code>大于1.0将会快进，设置成一个负值将会倒回动画。<br>通过增加主窗口图层的speed，可以暂停整个应用程序的动画。这对UI自动化提供了好处，我们可以加速所有的视图动画来进行自动化测试（注意对于在主窗口之外的视图并不会被影响，比如UIAlertview）。可以在app delegate设置如下进行验证：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.window.layer.speed = <span class=\"number\">100</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>你也可以通过这种方式来减速，但其实也可以在模拟器通过切换慢速动画来实现。</p>\n","excerpt":"","more":"<ul>\n<li>全局时间和本地时间S</li>\n</ul>\n<p>CoreAnimation有一个全局时间的概念，也就是所谓的<strong>马赫时间</strong>（“马赫”实际上是iOS和Mac OS系统内核的命名）。马赫时间在设备上所有进程都是全局的–但是在不同设备上并不是全局的–不过这已经足够对动画的参考点提供便利了，你可以使用CACurrentMediaTime函数来访问马赫时间：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">CFTimeInterval time</span> = CACurrentMediaTime();</div></pre></td></tr></table></figure>\n<p>这个函数返回的值其实无关紧要（它返回了设备自从上次启动后的秒数，并不是你所关心的），它真实的作用在于对动画的时间测量提供了一个相对值。注意当设备休眠的时候马赫时间会暂停，也就是所有的CAAnimations（基于马赫时间）同样也会暂停。</p>\n<p>每个CALayer和CAAnimation实例都有自己本地时间的概念，是根据父图层/动画层级关系中的beginTime，timeOffset和speed属性计算。就和转换不同图层之间坐标关系一样，CALayer同样也提供了方法来转换不同图层之间的本地时间。如下：</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- <span class=\"params\">(CFTimeInterval)</span>convertTime:<span class=\"params\">(CFTimeInterval)</span>t fromLayer:<span class=\"params\">(CALayer *)</span>l; </div><div class=\"line\">- <span class=\"params\">(CFTimeInterval)</span>convertTime:<span class=\"params\">(CFTimeInterval)</span>t toLayer:<span class=\"params\">(CALayer *)</span>l;</div></pre></td></tr></table></figure>\n<p>当用来同步不同图层之间有不同的speed，timeOffset和beginTime的动画，这些方法会很有用。</p>\n<ul>\n<li>暂停，倒回和快进</li>\n</ul>\n<p>设置动画的speed属性为0可以暂停动画，但在动画被添加到图层之后不太可能再修改它了，所以不能对正在进行的动画使用这个属性。给图层添加一个<code>CAAnimation</code>实际上是给动画对象做了一个不可改变的拷贝，所以对原始动画对象属性的改变对真实的动画并没有作用。相反，直接用<code>-animationForKey:</code>来检索图层正在进行的动画可以返回正确的动画对象，但是修改它的属性将会抛出异常。<br>如果移除图层正在进行的动画，图层将会急速返回动画之前的状态。但如果在动画移除之前拷贝呈现图层到模型图层，动画将会看起来暂停在那里。但是不好的地方在于之后就不能再恢复动画了。<br>一个简单的方法是可以利用<code>CAMediaTiming</code>来暂停图层本身。如果把图层的speed设置成0，它会暂停任何添加到图层上的动画。类似的，设置<code>speed</code>大于1.0将会快进，设置成一个负值将会倒回动画。<br>通过增加主窗口图层的speed，可以暂停整个应用程序的动画。这对UI自动化提供了好处，我们可以加速所有的视图动画来进行自动化测试（注意对于在主窗口之外的视图并不会被影响，比如UIAlertview）。可以在app delegate设置如下进行验证：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.window.layer.speed = <span class=\"number\">100</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>你也可以通过这种方式来减速，但其实也可以在模拟器通过切换慢速动画来实现。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciy1bmbr000098gfy5rfws810","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbr6000f8gfyjs6d9bmw"},{"post_id":"ciy1bmbqd00018gfy65td7gd5","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbrg000j8gfyi2fb4axx"},{"post_id":"ciy1bmbr1000a8gfytl0awb9q","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbrj000m8gfy0kmk2tng"},{"post_id":"ciy1bmbr5000e8gfyws97dj5l","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbrn000q8gfyw893r3wl"},{"post_id":"ciy1bmbqm00038gfyyswczs2w","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbrs000t8gfywbpjm5bg"},{"post_id":"ciy1bmbrh000k8gfyitv8w678","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbru000u8gfym4te5ggn"},{"post_id":"ciy1bmbqt00078gfy0o4dfsz6","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbrv000w8gfymlo9lvkg"},{"post_id":"ciy1bmbrk000n8gfyzr7w83yx","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbrv000x8gfyw59f2b1s"},{"post_id":"ciy1bmbro000r8gfycreoaf6g","category_id":"ciy1bmbqp00058gfyqaoyna2r","_id":"ciy1bmbrv000z8gfy4igeycf3"},{"post_id":"ciy1bmbr7000g8gfyym3v290k","category_id":"ciy1bmbrl000o8gfytzry75fa","_id":"ciy1bmbrv00118gfy0yierxei"}],"PostTag":[{"post_id":"ciy1bmbqd00018gfy65td7gd5","tag_id":"ciy1bmbqs00068gfyez9kcs89","_id":"ciy1bmbr4000d8gfyjwn3mm3b"},{"post_id":"ciy1bmbqm00038gfyyswczs2w","tag_id":"ciy1bmbr2000c8gfy8uibvfhc","_id":"ciy1bmbrj000l8gfyaq3rwqqx"},{"post_id":"ciy1bmbqt00078gfy0o4dfsz6","tag_id":"ciy1bmbra000i8gfyddhqkzo6","_id":"ciy1bmbrs000s8gfyqzos3dkx"},{"post_id":"ciy1bmbr000098gfy5rfws810","tag_id":"ciy1bmbrn000p8gfys333pyrm","_id":"ciy1bmbrv00108gfy93puslcs"},{"post_id":"ciy1bmbr000098gfy5rfws810","tag_id":"ciy1bmbru000v8gfyuf4l707m","_id":"ciy1bmbrv00128gfyqs89wmtn"},{"post_id":"ciy1bmbr1000a8gfytl0awb9q","tag_id":"ciy1bmbrv000y8gfy3ghqgtjr","_id":"ciy1bmbrx00148gfyx4c9dkbc"},{"post_id":"ciy1bmbr5000e8gfyws97dj5l","tag_id":"ciy1bmbrn000p8gfys333pyrm","_id":"ciy1bmbrx00168gfybxmzze2e"},{"post_id":"ciy1bmbr7000g8gfyym3v290k","tag_id":"ciy1bmbrx00158gfyhce1otwi","_id":"ciy1bmbry00188gfy5r2f7lwp"},{"post_id":"ciy1bmbrh000k8gfyitv8w678","tag_id":"ciy1bmbrn000p8gfys333pyrm","_id":"ciy1bmbrz001a8gfyluu2xyph"},{"post_id":"ciy1bmbrk000n8gfyzr7w83yx","tag_id":"ciy1bmbrn000p8gfys333pyrm","_id":"ciy1bmbrz001c8gfyoa3ksd6c"},{"post_id":"ciy1bmbro000r8gfycreoaf6g","tag_id":"ciy1bmbrz001b8gfy3a4hwtw9","_id":"ciy1bmbs0001d8gfy5t3a7y0u"}],"Tag":[{"name":"Xcode","_id":"ciy1bmbqs00068gfyez9kcs89"},{"name":"支付","_id":"ciy1bmbr2000c8gfy8uibvfhc"},{"name":"iOS 10","_id":"ciy1bmbra000i8gfyddhqkzo6"},{"name":"Swift","_id":"ciy1bmbrn000p8gfys333pyrm"},{"name":"Objective-C","_id":"ciy1bmbru000v8gfyuf4l707m"},{"name":"Xcode 8","_id":"ciy1bmbrv000y8gfy3ghqgtjr"},{"name":"Hexo","_id":"ciy1bmbrx00158gfyhce1otwi"},{"name":"动画","_id":"ciy1bmbrz001b8gfy3a4hwtw9"}]}}